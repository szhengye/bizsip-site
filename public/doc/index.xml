<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Biz-SIP服务整合中间件</title>
    <link>http://bizsip.bizmda.com/doc/</link>
      <atom:link href="http://bizsip.bizmda.com/doc/index.xml" rel="self" type="application/rss+xml" />
    <description>Biz-SIP服务整合中间件</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>© 2020-2021 BIZMDA.com版权所有 [沪ICP备2021002172号](http://beian.miit.gov.cn)</copyright><lastBuildDate>Fri, 24 Sep 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://bizsip.bizmda.com/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Biz-SIP服务整合中间件</title>
      <link>http://bizsip.bizmda.com/doc/</link>
    </image>
    
    <item>
      <title>快速启动</title>
      <link>http://bizsip.bizmda.com/doc/quick-start/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://bizsip.bizmda.com/doc/quick-start/</guid>
      <description>&lt;p&gt;快速安装并运行Biz-SIP中间件，并运行相关的测试案例.&lt;/p&gt;
&lt;h2 id=&#34;一安装&#34;&gt;一、安装&lt;/h2&gt;
&lt;h3 id=&#34;1-项目源码下载&#34;&gt;1 项目源码下载&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从“&lt;a href=&#34;https://gitee.com/szhengye/biz-sip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gitee.com/szhengye/biz-sip&lt;/a&gt;”中Clone下载项目源码，SpringBoot版本下载springboot分支，SpringCloud版本下载springcloud分支。&lt;/li&gt;
&lt;li&gt;在Eclipse或IDEA中作为Maven项目导入。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-mysql安装&#34;&gt;2 MySQL安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装MySQL镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=bizsip123456 -d mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;建库&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;执行项目中sql/sample.sql脚本，以建立sip演示库。&lt;/p&gt;
&lt;h3 id=&#34;3-redis安装&#34;&gt;3 Redis安装&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -p 6379:6379 -d redis:latest redis-server
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-rabbitmq安装&#34;&gt;4 RabbitMQ安装&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull rabbitmq
docker run -d --name rabbitmq -e RABBITMQ_DEFAULT_USER=springcloud -e RABBITMQ_DEFAULT_PASS=springcloud -p 15672:15672 -p 5672:5672 rabbitmq:management
# 下载延迟队列插件，并拷贝到容器中相关目录
docker cp rabbitmq_delayed_message_exchange-3.8.0.ez rabbitmq:/plugins
# 进入容器交互终端模式，用&amp;quot;docker ps&amp;quot;命令查询RabbitMQ的容器ID
docker exec -it &amp;lt;容器ID&amp;gt; bash
# 执行命令启用延迟队列插件
rabbitmq-plugins enable rabbitmq_delayed_message_exchange
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-nacos安装springcloud版本&#34;&gt;5 Nacos安装（SpringCloud版本）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下载Nacos镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull nacos/nacos-server
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;启动Nacos镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server
# 登录密码默认nacos/nacos
# standalone 代表单机模式运行，非集群模式
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;访问Nacos，默认账号/密码：nacos/nacos，访问地址：&lt;a href=&#34;http://192.168.247.131:8848/nacos/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:8848/nacos/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二配置&#34;&gt;二、配置&lt;/h2&gt;
&lt;h3 id=&#34;1-integrator相关配置文件&#34;&gt;1 integrator相关配置文件&lt;/h3&gt;
&lt;p&gt;application.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;spring:
  profiles:
    active: local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;application-local.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
  port: 8888

spring:
  application:
    name: bizsip-integrator

  cloud:
    nacos:
      discovery:
        server-addr: bizsip-nacos:8848
#  以下配置在Istio部署中打开，以不采用NACOS注册中心，而采用etcd注册机制
#  cloud:
#    service-registry:
#      auto-registration:
#        enabled: false  #禁用注册中心服务
        
  datasource:
    url: jdbc:mysql://bizsip-mysql/sip
    username: root
    password: bizsip123456
    driver-class-name: com.mysql.jdbc.Driver

  redis:
    redisson:
      enable: true
    host: bizsip-redis
    port: 6379
    timeout: 6000
    database: 0
    lettuce:
      pool:
        max-active: 10 # 连接池最大连接数（使用负值表示没有限制）,如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)
        max-idle: 8   # 连接池中的最大空闲连接 ，默认值也是8
        max-wait: 100 # # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
        min-idle: 2    # 连接池中的最小空闲连接 ，默认值也是0
      shutdown-timeout: 100ms

  rabbitmq:
    virtual-host: /
    host: bizsip-rabbitmq
    port: 5672
    username: springcloud
    password: springcloud
    listener:
      simple:
        concurrency: 5
        max-concurrency: 15
        prefetch: 10

bizsip:
  config-path: /var/bizsip/config

logging:
  level:
    com.bizmda.bizsip: info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server.port：服务整合器（Integrator）的微服务端口，建议用8888端口，避免和其它端口相冲突。&lt;/li&gt;
&lt;li&gt;spring.datasource.*：为数据库相关配置，应连接对应的数据库。&lt;/li&gt;
&lt;li&gt;spring.redis.*：为Redis相关配置，连接对应的Redis。&lt;/li&gt;
&lt;li&gt;spring.rabbitmq.*：为RabbitMQ相关配置，连接RabbitMQ中间件。&lt;/li&gt;
&lt;li&gt;bizsip.config-path：配置成项目下sample/config的实际安装目录。&lt;/li&gt;
&lt;li&gt;logging.level.com.bizmda.bizsip：日志级别，一般设置为info。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-samplesample-sink模块相关配置文件&#34;&gt;2 sample/sample-sink模块相关配置文件&lt;/h3&gt;
&lt;p&gt;application.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;spring:
  profiles:
    active: local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;application-local.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
  port: 8001
spring:
  application:
    name: bizsip-sample-sink

  cloud:
    nacos:
      discovery:
        server-addr: bizsip-nacos:8848
  #  以下配置在Istio部署中打开，以不采用NACOS注册中心，而采用etcd注册机制
  #  cloud:
  #    service-registry:
  #      auto-registration:
  #        enabled: false  #禁用注册中心服务

  rabbitmq:
    virtual-host: /
    host: bizsip-rabbitmq
    port: 5672
    username: springcloud
    password: springcloud
    listener:
      simple:
        concurrency: 5
        max-concurrency: 15
        prefetch: 10

bizsip:
  config-path: /Users/shizhengye/IdeaProjects/biz-sip/sample/config
#  config-path: /var/bizsip/config
#  sink-id: sink-nothing	#如果引用了com.bizmda.bizsip.sink.controller.SinkController，就需要配置这个参数

logging:
  level:
    com.bizmda.bizsip: debug
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server.port：为sample服务接入模块的RESTful服务端口，建议用8080。&lt;/li&gt;
&lt;li&gt;spring.rabbitmq.*：为RabbitMQ相关配置，连接RabbitMQ中间件。&lt;/li&gt;
&lt;li&gt;bizsip.config-path：配置成项目下sample/config的实际安装目录。&lt;/li&gt;
&lt;li&gt;sink-id：如果引用了Sink默认Controller（com.bizmda.bizsip.sink.controller.SinkController），就需要配置这个参数&lt;/li&gt;
&lt;li&gt;logging.level.com.bizmda.bizsip：日志级别，一般设置为info。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-samplesample-source模块相关配置文件&#34;&gt;3 sample/sample-source模块相关配置文件&lt;/h3&gt;
&lt;p&gt;application.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;spring:
  profiles:
    active: local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;application-local.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
  port: 8080

spring:
  application:
    name: bizsip-sample-source

  cloud:
    nacos:
      discovery:
        server-addr: bizsip-nacos:8848
  #  以下配置在Istio部署中打开，以不采用NACOS注册中心，而采用etcd注册机制
  #  cloud:
  #    service-registry:
  #      auto-registration:
  #        enabled: false  #禁用注册中心服务
  
bizsip:
  config-path: /var/bizsip/config
  integrator-url: http://bizsip-integrator/api

logging:
  level:
    com.bizmda.bizsip: info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server.port：为sample服务调用模块的微服务端口，建议用8001，不要其它端口相冲突。&lt;/li&gt;
&lt;li&gt;bizsip.integrator-url：为服务整合器（Integrator）的服务接口url，原则上不需要修改。&lt;/li&gt;
&lt;li&gt;bizsip.config-path：配置成项目下sample/config的实际安装目录。&lt;/li&gt;
&lt;li&gt;logging.level.com.bizmda.bizsip：日志级别，一般设置为info。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-sourcenetty-source模块相关配置文件&#34;&gt;4 source/netty-source模块相关配置文件&lt;/h3&gt;
&lt;p&gt;application.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;spring:
  profiles:
    active: local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;application-local.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
  port: 8090

spring:
  application:
    name: bizsip-netty-source

  cloud:
    nacos:
      discovery:
        server-addr: bizsip-nacos:8848
  #  以下配置在Istio部署中打开，以不采用NACOS注册中心，而采用etcd注册机制
  #  cloud:
  #    service-registry:
  #      auto-registration:
  #        enabled: false  #禁用注册中心服务

bizsip:
  config-path: /var/bizsip/config
  integrator-url: http://bizsip-integrator/api
  source-id: source1

netty:
  port: 10002

logging:
  level:
    com.bizmda.bizsip: debug
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server.port：为sample服务调用模块的微服务端口，建议用8090，不要其它端口相冲突。&lt;/li&gt;
&lt;li&gt;bizsip.integrator-url：为服务整合器（Integrator）的服务接口url，原则上不需要修改。&lt;/li&gt;
&lt;li&gt;bizsip.config-path：配置成项目下sample/config的实际安装目录。&lt;/li&gt;
&lt;li&gt;bizsip.source-id：为当前source模块的Source ID。&lt;/li&gt;
&lt;li&gt;logging.level.com.bizmda.bizsip：日志级别，一般设置为info。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三启动系统&#34;&gt;三、启动系统&lt;/h2&gt;
&lt;p&gt;测试用例架构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1619764437376-05aaaef1-f349-4193-8b4a-2bff736c10b3-20210924201314876.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-启动服务整合器integrator&#34;&gt;1 启动服务整合器（Integrator）&lt;/h3&gt;
&lt;p&gt;运行integrator模块下“IntegratorApplication.java”&lt;/p&gt;
&lt;h3 id=&#34;2-启动sample-sink模块&#34;&gt;2 启动Sample Sink模块&lt;/h3&gt;
&lt;p&gt;运行sample/sample-sink模块下“SampleSinkApplication.java”&lt;/p&gt;
&lt;h3 id=&#34;3-启动sample-source模块&#34;&gt;3 启动Sample Source模块&lt;/h3&gt;
&lt;p&gt;运行sample/sample-source模块下“SampleSourceApplication.java”&lt;/p&gt;
&lt;h3 id=&#34;4-启动netty-tcp-source模块可选&#34;&gt;4 启动Netty TCP Source模块（可选）&lt;/h3&gt;
&lt;p&gt;运行source/netty-source模块下“NettySourceApplication.java”&lt;/p&gt;
&lt;h3 id=&#34;5-启动openapi网关springcloud版本可以不用开启&#34;&gt;5 启动OpenAPI网关（SpringCloud版本，可以不用开启）&lt;/h3&gt;
&lt;p&gt;运行api-gateway模块下“GatewayApplication.java”。
对于后续测试案例的调用发起，都是直接发给Integrator服务整合器的，端口是8888；如果需要从OpenAPI网关发起，端口是8000。这二种情况的返回结果是一致的。
后续测试案例都是直接发给Integrator服务整合器的，目前端口是8888。&lt;/p&gt;
&lt;h2 id=&#34;四运行sample测试案例&#34;&gt;四、运行Sample测试案例&lt;/h2&gt;
&lt;h3 id=&#34;1-简单服务处理&#34;&gt;1 简单服务处理&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口发送请求，由服务整合器处理后，直接返回。
&lt;img src=&#34;a51ec1a83e2a9a313c8f9c31ed2663de.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/sample1&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;62001818&amp;quot;,&amp;quot;sex&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;123232@163.com&amp;quot;,&amp;quot;mobile&amp;quot;:&amp;quot;18601872345&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;414ac54e35d446a9bf36a7bae189eb2b&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1610334191563,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;62001818的账户名...&amp;quot;,
    &amp;quot;sex&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;mobile&amp;quot;: &amp;quot;18601872345&amp;quot;,
    &amp;quot;accountNo&amp;quot;: &amp;quot;62001818&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;123232@163.com&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-简单服务转发&#34;&gt;2 简单服务转发&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，调用CRM服务（用CrmServer.java类作为模拟），查询返回对应的账户名称。
&lt;img src=&#34;ea627b4bd4f84a360a6ab7657e531530.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/sample2&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;f30a96f6d73b4f44853b56a29688e1aa&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609914563646,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;张三&amp;quot;,
    &amp;quot;accountNo&amp;quot;: &amp;quot;003&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-非标接口接入&#34;&gt;3 非标接口接入&lt;/h3&gt;
&lt;p&gt;通过非标API接口上送服务请求，实现原来通过标准API接口调用openapi/sample2服务。
&lt;img src=&#34;6a00eb4215d03a586d2e7effc3ef4536.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -X POST --data &#39;{&amp;quot;serviceId&amp;quot;:&amp;quot;/openapi/sample2&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39; http://localhost:8080/source1|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;9a0421faccf14f7b8f8dfd9916e8aca2&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1619768390392,
  &amp;quot;data&amp;quot;: &amp;quot;{\&amp;quot;accountName\&amp;quot;:\&amp;quot;张三\&amp;quot;,\&amp;quot;accountNo\&amp;quot;:\&amp;quot;003\&amp;quot;,\&amp;quot;serviceId\&amp;quot;:\&amp;quot;/openapi/sample2\&amp;quot;}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-调用多个服务&#34;&gt;4 调用多个服务&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，调用Server1返回帐户名称，调用Server2返回账户余额。
&lt;img src=&#34;224ccd5fb77e8fc5651151dc0d238340.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/sample4&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;67e451ea394a4714b3be6b4496ead1e6&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609914708687,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,
    &amp;quot;balance&amp;quot;: 500,
    &amp;quot;accountNo&amp;quot;: &amp;quot;005&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-简单xml消息转换&#34;&gt;5 简单XML消息转换&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，用simple-xml消息格式调用Server3，Server3会调用EchoServer打印消息报文，并用原服文返回。
&lt;img src=&#34;0d42cc640f7ae8bda9d635aa9b5eda28.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/sample5&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;balance&amp;quot;: 500,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;41112613fd4d4d9a85d8ba420ed5dbd5&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609914764308,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,
    &amp;quot;balance&amp;quot;: 500,
    &amp;quot;accountNo&amp;quot;: &amp;quot;005&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Server3接入EchoServer类打印的消息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;EchoServer传入消息:&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;root&amp;gt;&amp;lt;accountName&amp;gt;王五&amp;lt;/accountName&amp;gt;&amp;lt;balance&amp;gt;500&amp;lt;/balance&amp;gt;&amp;lt;accountNo&amp;gt;005&amp;lt;/accountNo&amp;gt;&amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6-复杂json消息转换&#34;&gt;6 复杂JSON消息转换&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，用velocity-json消息格式调用Server4，Server4会调用EchoServer打印消息报文，并用原服文返回。
&lt;img src=&#34;bdc48a9317d500998810b7c44929cbfa.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server4&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;sex&amp;quot;: &amp;quot;0&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;f6e36e068f824d57840222bafb9f0fac&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609914809605,
  &amp;quot;data&amp;quot;: {
    &amp;quot;sex&amp;quot;: &amp;quot;女&amp;quot;,
    &amp;quot;account_no&amp;quot;: &amp;quot;005&amp;quot;,
    &amp;quot;account_name&amp;quot;: &amp;quot;王五&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EchoServer打印日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;EchoServer传入消息:{sex:&amp;quot;女&amp;quot;,account_no:&amp;quot;005&amp;quot;,account_name:&amp;quot;王五&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server4&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;f2d0e28597634b1a89c4e8e4140ae8a7&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609914847120,
  &amp;quot;data&amp;quot;: {
    &amp;quot;sex&amp;quot;: &amp;quot;男&amp;quot;,
    &amp;quot;account_no&amp;quot;: &amp;quot;005&amp;quot;,
    &amp;quot;account_name&amp;quot;: &amp;quot;王五&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EchoServer打印日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;EchoServer传入消息:{sex:&amp;quot;男&amp;quot;,account_no:&amp;quot;005&amp;quot;,account_name:&amp;quot;王五&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server4&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;sex&amp;quot;: &amp;quot;2&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;297c62d7fc234eb894d7447e0667f360&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609914874611,
  &amp;quot;data&amp;quot;: {
    &amp;quot;sex&amp;quot;: &amp;quot;?&amp;quot;,
    &amp;quot;account_no&amp;quot;: &amp;quot;005&amp;quot;,
    &amp;quot;account_name&amp;quot;: &amp;quot;王五&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EchoServer打印日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;EchoServer传入消息:{sex:&amp;quot;?&amp;quot;,account_no:&amp;quot;005&amp;quot;,account_name:&amp;quot;王五&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7-复杂xml消息转换&#34;&gt;7 复杂XML消息转换&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，用velocity-xml消息格式调用Server5，Server5会调用EchoServer打印消息报文，并用原服文返回。
&lt;img src=&#34;18e5d62adf6d0e070012e927de0aabee.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server5&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;sex&amp;quot;: &amp;quot;0&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;,&amp;quot;balance&amp;quot;:100}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;04a92806779a415b94a056a390c38c58&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631418837236,
  &amp;quot;data&amp;quot;: {
    &amp;quot;account&amp;quot;: {
      &amp;quot;no&amp;quot;: &amp;quot;005&amp;quot;,
      &amp;quot;sex&amp;quot;: &amp;quot;女人&amp;quot;,
      &amp;quot;balance&amp;quot;: 100,
      &amp;quot;name&amp;quot;: &amp;quot;王五&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SampleSinkApplication打印日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;EchoServer传入消息:[&amp;lt;account&amp;gt;
    &amp;lt;name&amp;gt;王五&amp;lt;/name&amp;gt;
    &amp;lt;balance&amp;gt;100&amp;lt;/balance&amp;gt;
    &amp;lt;no&amp;gt;005&amp;lt;/no&amp;gt;
    &amp;lt;sex&amp;gt;女人&amp;lt;/sex&amp;gt;
&amp;lt;/account&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server5&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;sex&amp;quot;: &amp;quot;0&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;,&amp;quot;balance&amp;quot;:1000}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;c798f6cfc22b42e19933d860ba6bce3b&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609915845068,
  &amp;quot;data&amp;quot;: {
    &amp;quot;account&amp;quot;: {
      &amp;quot;no&amp;quot;: &amp;quot;005&amp;quot;,
      &amp;quot;sex&amp;quot;: &amp;quot;女人&amp;quot;,
      &amp;quot;balance&amp;quot;: 1000,
      &amp;quot;name&amp;quot;: &amp;quot;王五&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SampleSinkApplication打印日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;EchoServer传入消息:[&amp;lt;account&amp;gt;
    &amp;lt;name&amp;gt;王五&amp;lt;/name&amp;gt;
    &amp;lt;balance&amp;gt;1000&amp;lt;/balance&amp;gt;
    &amp;lt;no&amp;gt;005&amp;lt;/no&amp;gt;
    &amp;lt;sex&amp;gt;女人&amp;lt;/sex&amp;gt;
&amp;lt;/account&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server5&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;sex&amp;quot;: &amp;quot;2&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;,&amp;quot;balance&amp;quot;:1000}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;8014463d1c7d451cb47c279973931ba0&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609915967831,
  &amp;quot;data&amp;quot;: {
    &amp;quot;account&amp;quot;: {
      &amp;quot;no&amp;quot;: &amp;quot;005&amp;quot;,
      &amp;quot;sex&amp;quot;: &amp;quot;不知道&amp;quot;,
      &amp;quot;balance&amp;quot;: 1000,
      &amp;quot;name&amp;quot;: &amp;quot;王五&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SampleSinkApplication打印日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;EchoServer传入消息:[&amp;lt;account&amp;gt;
    &amp;lt;name&amp;gt;王五&amp;lt;/name&amp;gt;
    &amp;lt;balance&amp;gt;1000&amp;lt;/balance&amp;gt;
    &amp;lt;no&amp;gt;005&amp;lt;/no&amp;gt;
    &amp;lt;sex&amp;gt;不知道&amp;lt;/sex&amp;gt;
&amp;lt;/account&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8-定长消息转换&#34;&gt;8 定长消息转换&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，用定长消息格式调用Server6，Server6会调用EchoServer打印消息报文，并用原服文返回。
&lt;img src=&#34;99b3cddca4737803fc0453b97bea2e9b.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server6&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;balance&amp;quot;: 500,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;,&amp;quot;sex&amp;quot;:&amp;quot;0&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;f46a1f79ca0241719b4dc1bd3cc3457c&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609916044599,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;王五        &amp;quot;,
    &amp;quot;sex&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;balance&amp;quot;: &amp;quot;500       &amp;quot;,
    &amp;quot;accountNo&amp;quot;: &amp;quot;005     &amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SampleSinkApplicationc对于Server6接入EchoServer类打印的消息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;EchoServer传入消息:[0005     王五        500       ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;9-有分隔符消息转换&#34;&gt;9 有分隔符消息转换&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，用定长消息格式调用Server7，Server7会调用EchoServer打印消息报文，并用原服文返回。
&lt;img src=&#34;11d78198c66f5e6b2f3ef974a78cd311.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server7&amp;quot; -X POST --data &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;balance&amp;quot;: 500,&amp;quot;accountNo&amp;quot;:&amp;quot;005&amp;quot;,&amp;quot;sex&amp;quot;:&amp;quot;0&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;3a139d684acc4137b744625cace14267&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1610336392183,
  &amp;quot;data&amp;quot;: {
    &amp;quot;array&amp;quot;: [
      [
        &amp;quot;0&amp;quot;,
        &amp;quot;005&amp;quot;
      ],
      [
        &amp;quot;王五&amp;quot;,
        &amp;quot;500&amp;quot;
      ]
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SampleSinkApplicationc对于Server7接入EchoServer类打印的消息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;EchoServer传入消息:[0,005*王五,500]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;10-iso8583消息转换&#34;&gt;10 ISO8583消息转换&lt;/h3&gt;
&lt;p&gt;通过source controller，在sink端打包成ISO8583报文格式调用sink13，sink13会调用EchoServer打印消息报文，并用原服文返回，在sink端解包成JSON报文后返回。
&lt;img src=&#34;4cb75220113a8cd22309c73fd6d4b483.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; http://localhost:8080/sink13|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;91bef734f69a4da8b1be35138a4e9707&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1632041946033,
  &amp;quot;data&amp;quot;: {
    &amp;quot;msgType&amp;quot;: &amp;quot;0800&amp;quot;,
    &amp;quot;reserved60&amp;quot;: &amp;quot;000000000030&amp;quot;,
    &amp;quot;card_accptr_id42&amp;quot;: &amp;quot;898411341310014&amp;quot;,
    &amp;quot;systemTraceAuditNumber11&amp;quot;: &amp;quot;000001&amp;quot;,
    &amp;quot;switching_data62&amp;quot;: &amp;quot;53657175656e6365204e6f3132333036303733373832323134&amp;quot;,
    &amp;quot;card_accptr_termnl_id41&amp;quot;: &amp;quot;73782214&amp;quot;,
    &amp;quot;msgHead&amp;quot;: &amp;quot;31323031383430303031303334342020203432343330343430202020393031323334353637383930313233343536&amp;quot;,
    &amp;quot;acct_id_1_102&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;fin_net_data63&amp;quot;: &amp;quot;303031&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SampleSinkApplicationc对于sink13接入EchoServer类打印的消息：&lt;/p&gt;
&lt;h3 id=&#34;11-调用netty服务端&#34;&gt;11 调用Netty服务端&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，调用Netty TCP服务端。
&lt;img src=&#34;1cf2a7af1d0d0ff59b00eddf31d350f4.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在终端1启动：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;balance&amp;quot;: 500,&amp;quot;accountNo&amp;quot;:&amp;quot;xxx&amp;quot;}&#39;|nc -l 10001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在终端2启动：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/netty&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;999&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;bb4255801a54442ca16f0189d64b951f&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609916153979,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,
    &amp;quot;balance&amp;quot;: 500,
    &amp;quot;accountNo&amp;quot;: &amp;quot;xxx&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;终端1会显示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo &#39;{&amp;quot;accountName&amp;quot;: &amp;quot;王五&amp;quot;,&amp;quot;balance&amp;quot;: 500,&amp;quot;accountNo&amp;quot;:&amp;quot;xxx&amp;quot;}&#39;|nc -l 10001
{&amp;quot;accountNo&amp;quot;:&amp;quot;999&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12-netty客户端接入&#34;&gt;12 Netty客户端接入&lt;/h3&gt;
&lt;p&gt;通过Netty客户端接入，来调用聚合服务。
&lt;img src=&#34;67782a1d38f339e0eb42acc0d9e4f2ec.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo &#39;{&amp;quot;serviceId&amp;quot;:&amp;quot;/openapi/sample2&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39;|nc localhost 10002

{&amp;quot;accountName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;,&amp;quot;serviceId&amp;quot;:&amp;quot;/openapi/sample2&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;13-调用数据库操作&#34;&gt;13 调用数据库操作&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，在脚本服务中根据上送的账号在数据表中进行查询，并直接返回查询结果。
&lt;img src=&#34;f06d1db2f470eb1fda53e4e408adbc25.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/db1&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;002&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;19dd46603d844b40a1bce11cd2760e1c&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609924306042,
  &amp;quot;data&amp;quot;: [
    {
      &amp;quot;accountName&amp;quot;: &amp;quot;李四&amp;quot;,
      &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;balance&amp;quot;: 200,
      &amp;quot;accountNo&amp;quot;: &amp;quot;002&amp;quot;
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14-调用redis操作&#34;&gt;14 调用Redis操作&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，在脚本服务中根据上送的账号在Redis中进行存储，并直接返回查询结果。
&lt;img src=&#34;a3fabc46733738ac91614188eec32763.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/redis1&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;002&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;e04430bb7f754959b52a28a8a6e4456a&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609924818739,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;002&amp;quot;,
    &amp;quot;accountNo&amp;quot;: &amp;quot;002&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;redis&amp;gt;get account_no
&amp;quot;002&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;15-通过事务管理进行服务调用重试&#34;&gt;15 通过事务管理进行服务调用重试&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，在脚本服务中调用SAF服务，对server3服务进行多达5次的服务重试调用。
&lt;img src=&#34;2d025639c899667263b26120319031d1.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/safservice&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39; http://localhost:8888/api|jq  
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   186    0   167  100    19    598     68 --:--:-- --:--:-- --:--:--   666
{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;f1afe72dac0842ad8912e063b7bcf593&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631513601741,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountNo&amp;quot;: &amp;quot;003&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SampleSinkApplication日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:21.952 DEBUG 53605 [48E46F14E87845BE9040414A89AEFC03] [http-nio-8001-exec-1] c.b.b.s.sink.controller.Sink3Controller  inMessage:BizMessage(code=0, message=null, extMessage=null, traceId=f1afe72dac0842ad8912e063b7bcf593, parentTraceId=null, timestamp=1631513601741, data={&amp;quot;retryCount&amp;quot;:1,&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;})
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:21.955 DEBUG 53605 [48E46F14E87845BE9040414A89AEFC03] [http-nio-8001-exec-1] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]打包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:21.963 DEBUG 53605 [48E46F14E87845BE9040414A89AEFC03] [http-nio-8001-exec-1] com.bizmda.bizsip.sink.Sink              Sink通过Connect[sink-bean]调用服务
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:21.963 DEBUG 53605 [48E46F14E87845BE9040414A89AEFC03] [http-nio-8001-exec-1] c.b.b.s.connector.SinkBeanSinkConnector  调用SinkBeanSinkConnector[com.bizmda.bizsip.sample.sink.controller.EchoServer]的process()
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:21.963 DEBUG 53605 [48E46F14E87845BE9040414A89AEFC03] [http-nio-8001-exec-1] c.b.b.sample.sink.controller.EchoServer  EchoServer传入消息:[&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;root&amp;gt;&amp;lt;retryCount&amp;gt;1&amp;lt;/retryCount&amp;gt;&amp;lt;accountNo&amp;gt;003&amp;lt;/accountNo&amp;gt;&amp;lt;/root&amp;gt;]
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:21.964 DEBUG 53605 [48E46F14E87845BE9040414A89AEFC03] [http-nio-8001-exec-1] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]解包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:24.014 DEBUG 53605 [317BD9F4F3044E92A6A1D271ACD8376B] [http-nio-8001-exec-2] c.b.b.s.sink.controller.Sink3Controller  inMessage:BizMessage(code=0, message=null, extMessage=null, traceId=f1afe72dac0842ad8912e063b7bcf593, parentTraceId=null, timestamp=1631513601741, data={&amp;quot;retryCount&amp;quot;:2,&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;})
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:24.014 DEBUG 53605 [317BD9F4F3044E92A6A1D271ACD8376B] [http-nio-8001-exec-2] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]打包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:24.028 DEBUG 53605 [317BD9F4F3044E92A6A1D271ACD8376B] [http-nio-8001-exec-2] com.bizmda.bizsip.sink.Sink              Sink通过Connect[sink-bean]调用服务
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:24.028 DEBUG 53605 [317BD9F4F3044E92A6A1D271ACD8376B] [http-nio-8001-exec-2] c.b.b.s.connector.SinkBeanSinkConnector  调用SinkBeanSinkConnector[com.bizmda.bizsip.sample.sink.controller.EchoServer]的process()
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:24.029 DEBUG 53605 [317BD9F4F3044E92A6A1D271ACD8376B] [http-nio-8001-exec-2] c.b.b.sample.sink.controller.EchoServer  EchoServer传入消息:[&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;root&amp;gt;&amp;lt;retryCount&amp;gt;2&amp;lt;/retryCount&amp;gt;&amp;lt;accountNo&amp;gt;003&amp;lt;/accountNo&amp;gt;&amp;lt;/root&amp;gt;]
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:24.030 DEBUG 53605 [317BD9F4F3044E92A6A1D271ACD8376B] [http-nio-8001-exec-2] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]解包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:28.083 DEBUG 53605 [A62381D250A149E8AC201E5F1BBBDE33] [http-nio-8001-exec-3] c.b.b.s.sink.controller.Sink3Controller  inMessage:BizMessage(code=0, message=null, extMessage=null, traceId=f1afe72dac0842ad8912e063b7bcf593, parentTraceId=null, timestamp=1631513601741, data={&amp;quot;retryCount&amp;quot;:3,&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;})
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:28.083 DEBUG 53605 [A62381D250A149E8AC201E5F1BBBDE33] [http-nio-8001-exec-3] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]打包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:28.091 DEBUG 53605 [A62381D250A149E8AC201E5F1BBBDE33] [http-nio-8001-exec-3] com.bizmda.bizsip.sink.Sink              Sink通过Connect[sink-bean]调用服务
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:28.091 DEBUG 53605 [A62381D250A149E8AC201E5F1BBBDE33] [http-nio-8001-exec-3] c.b.b.s.connector.SinkBeanSinkConnector  调用SinkBeanSinkConnector[com.bizmda.bizsip.sample.sink.controller.EchoServer]的process()
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:28.091 DEBUG 53605 [A62381D250A149E8AC201E5F1BBBDE33] [http-nio-8001-exec-3] c.b.b.sample.sink.controller.EchoServer  EchoServer传入消息:[&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;root&amp;gt;&amp;lt;retryCount&amp;gt;3&amp;lt;/retryCount&amp;gt;&amp;lt;accountNo&amp;gt;003&amp;lt;/accountNo&amp;gt;&amp;lt;/root&amp;gt;]
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:28.093 DEBUG 53605 [A62381D250A149E8AC201E5F1BBBDE33] [http-nio-8001-exec-3] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]解包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:36.162 DEBUG 53605 [305FB08B640B41EC92EF8AED3AE667F6] [http-nio-8001-exec-4] c.b.b.s.sink.controller.Sink3Controller  inMessage:BizMessage(code=0, message=null, extMessage=null, traceId=f1afe72dac0842ad8912e063b7bcf593, parentTraceId=null, timestamp=1631513601741, data={&amp;quot;retryCount&amp;quot;:4,&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;})
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:36.162 DEBUG 53605 [305FB08B640B41EC92EF8AED3AE667F6] [http-nio-8001-exec-4] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]打包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:36.167 DEBUG 53605 [305FB08B640B41EC92EF8AED3AE667F6] [http-nio-8001-exec-4] com.bizmda.bizsip.sink.Sink              Sink通过Connect[sink-bean]调用服务
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:36.167 DEBUG 53605 [305FB08B640B41EC92EF8AED3AE667F6] [http-nio-8001-exec-4] c.b.b.s.connector.SinkBeanSinkConnector  调用SinkBeanSinkConnector[com.bizmda.bizsip.sample.sink.controller.EchoServer]的process()
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:36.167 DEBUG 53605 [305FB08B640B41EC92EF8AED3AE667F6] [http-nio-8001-exec-4] c.b.b.sample.sink.controller.EchoServer  EchoServer传入消息:[&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;root&amp;gt;&amp;lt;retryCount&amp;gt;4&amp;lt;/retryCount&amp;gt;&amp;lt;accountNo&amp;gt;003&amp;lt;/accountNo&amp;gt;&amp;lt;/root&amp;gt;]
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:36.168 DEBUG 53605 [305FB08B640B41EC92EF8AED3AE667F6] [http-nio-8001-exec-4] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]解包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:52.373 DEBUG 53605 [933B128B00DB4B4AB79EE69CD2C80009] [http-nio-8001-exec-5] c.b.b.s.sink.controller.Sink3Controller  inMessage:BizMessage(code=0, message=null, extMessage=null, traceId=f1afe72dac0842ad8912e063b7bcf593, parentTraceId=null, timestamp=1631513601741, data={&amp;quot;retryCount&amp;quot;:5,&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;})
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:52.375 DEBUG 53605 [933B128B00DB4B4AB79EE69CD2C80009] [http-nio-8001-exec-5] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]打包
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:52.379 DEBUG 53605 [933B128B00DB4B4AB79EE69CD2C80009] [http-nio-8001-exec-5] com.bizmda.bizsip.sink.Sink              Sink通过Connect[sink-bean]调用服务
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:52.379 DEBUG 53605 [933B128B00DB4B4AB79EE69CD2C80009] [http-nio-8001-exec-5] c.b.b.s.connector.SinkBeanSinkConnector  调用SinkBeanSinkConnector[com.bizmda.bizsip.sample.sink.controller.EchoServer]的process()
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:52.379 DEBUG 53605 [933B128B00DB4B4AB79EE69CD2C80009] [http-nio-8001-exec-5] c.b.b.sample.sink.controller.EchoServer  EchoServer传入消息:[&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;root&amp;gt;&amp;lt;retryCount&amp;gt;5&amp;lt;/retryCount&amp;gt;&amp;lt;accountNo&amp;gt;003&amp;lt;/accountNo&amp;gt;&amp;lt;/root&amp;gt;]
[bizsip-sample-sink:192.168.10.15:8001] 2021-09-13 14:13:52.380 DEBUG 53605 [933B128B00DB4B4AB79EE69CD2C80009] [http-nio-8001-exec-5] com.bizmda.bizsip.sink.Sink              Sink调用Convert[simple-xml]解包

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;16-java聚合服务实现简单服务转发&#34;&gt;16 Java聚合服务实现简单服务转发&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，通过Java开发的聚合服务，来调用CRM服务（用CrmServer.java类作为模拟），查询返回对应的账户名称。
&lt;img src=&#34;19b889d9ff36ddde7abd839ca5bb2825.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:sample1.service1&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;31cd857883974c8bae79ecf8ac12fdf0&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1610246650385,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;张三&amp;quot;,
    &amp;quot;accountNo&amp;quot;: &amp;quot;003&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;17-java聚合服务调用基于script的延迟服务&#34;&gt;17 Java聚合服务调用基于Script的延迟服务&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，通过Java开发的聚合服务，调用SAF服务，对server3服务进行多达5次的服务重试调用。
&lt;img src=&#34;2d025639c899667263b26120319031d1-20210924202701753.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/sample/service2&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: null,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;7df1a4f93098402b902ba8eafec7bfcb&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: &amp;quot;c4a603917bb04bbc97d8041015dbe36c&amp;quot;,
  &amp;quot;timestamp&amp;quot;: 1610247196000,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountNo&amp;quot;: &amp;quot;003&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;18-调用netty长连接异步返回&#34;&gt;18 调用Netty长连接异步返回&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，通过RabbitMQ连接器，调用Netty TCP长连接，并把原包通过TCP长连接异步返回。
&lt;img src=&#34;341e167db6560e43b060d0ab2418fda7.svg&#34; alt=&#34;&#34;&gt;在终端1启动：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ nc -l 4444|nc localhost 4445
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在终端2启动：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server9&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;62001818&amp;quot;,&amp;quot;sex&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;123232@163.com&amp;quot;,&amp;quot;mobile&amp;quot;:&amp;quot;18601872345&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;e40c37b3196044b5a9f5b5e9c699262d&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1621303728434,
  &amp;quot;data&amp;quot;: {
    &amp;quot;sex&amp;quot;: &amp;quot;0&amp;quot;,
    &amp;quot;mobile&amp;quot;: &amp;quot;18601872345&amp;quot;,
    &amp;quot;accountNo&amp;quot;: &amp;quot;62001818&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;123232@163.com&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;19-调用springbean服务&#34;&gt;19 调用SpringBean服务&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，调用Spring容器Bean服务（用EchoBeanServer.java类作为模拟）。
&lt;img src=&#34;65f37a65daf1bcf8bb0336876aee88e4.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/openapi/server10&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;f30a96f6d73b4f44853b56a29688e1aa&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1609914563646,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountNo&amp;quot;: &amp;quot;003&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;20-聚合服务调用sinkclient接口服务&#34;&gt;20 聚合服务调用SinkClient接口服务&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，调用以Java接口方式暴露的SinkClient服务。
&lt;img src=&#34;bbdd4654c04896b1fc7bd728e24e0477.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/sample/service3&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39; http://localhost:8888/api|jq 

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;8490e767f25d4a08ad059a5ed49cec1d&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631442018752,
  &amp;quot;data&amp;quot;: {
    &amp;quot;customerDTO&amp;quot;: {
      &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;isMarried&amp;quot;: false,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;张三&amp;quot;,
      &amp;quot;age&amp;quot;: 20
    },
    &amp;quot;accountDTOs&amp;quot;: [
      {
        &amp;quot;balance&amp;quot;: 1200,
        &amp;quot;account&amp;quot;: &amp;quot;0001&amp;quot;
      },
      {
        &amp;quot;balance&amp;quot;: 45000,
        &amp;quot;account&amp;quot;: &amp;quot;0003&amp;quot;
      }
    ],
    &amp;quot;sink1&amp;quot;: {
      &amp;quot;accountName&amp;quot;: &amp;quot;张三&amp;quot;,
      &amp;quot;accountNo&amp;quot;: &amp;quot;003&amp;quot;
    },
    &amp;quot;accountDTOList&amp;quot;: [
      {
        &amp;quot;balance&amp;quot;: 3400,
        &amp;quot;account&amp;quot;: &amp;quot;0002&amp;quot;
      },
      {
        &amp;quot;balance&amp;quot;: 77800,
        &amp;quot;account&amp;quot;: &amp;quot;0004&amp;quot;
      }
    ],
    &amp;quot;result1&amp;quot;: &amp;quot;doService1() result&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;21-java聚合服务调用java延迟服务&#34;&gt;21 Java聚合服务调用Java延迟服务&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，在脚本服务中调用SAF服务，对server3服务进行多达5次的服务重试调用。
&lt;img src=&#34;2cdb9c26523ad91e889db449a442f35d.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上送请求数据说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“maxRetryNum”为最大请求次数&lt;/li&gt;
&lt;li&gt;“result”为最后的响应为成功还是失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/sample/service4&amp;quot; -X POST --data &#39;{&amp;quot;maxRetryNum&amp;quot;:2,&amp;quot;result&amp;quot;:&amp;quot;success&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;c16b63d02e844183811ac7cc01a4a046&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630217962113,
  &amp;quot;data&amp;quot;: {
    &amp;quot;maxRetryNum&amp;quot;: 2,
    &amp;quot;result&amp;quot;: &amp;quot;success&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-聚合服务匹配springbean服务&#34;&gt;22 聚合服务匹配SpringBean服务&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，通过在“prefix-service.yml”中约定的服务前缀，调用所绑定对应类（或接口）的SpringBean所对应的方法。
&lt;img src=&#34;c4f49701e5979c46fee698cf81670113.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/springbean&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;doService1&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;003&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;a4efdb7ea392416eabd048c283535a1e&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630398028746,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: &amp;quot;doService1() result&amp;quot;
  }
}

$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/springbean&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;doService2&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;003&amp;quot;,1]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;0ac04237c79a415daa76ed6543dce839&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630398312998,
  &amp;quot;data&amp;quot;: {}
}

$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/springbean&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;queryCustomerDTO&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;003&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;d20837e2b76048f8aabb09915d691f98&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630398340509,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;isMarried&amp;quot;: false,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;张三&amp;quot;,
      &amp;quot;age&amp;quot;: 20
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;23-sink聚合服务直接调用sink&#34;&gt;23 Sink聚合服务直接调用Sink&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，通过配置的Sink聚合服务，直接调用CRM服务（用CrmServer.java类作为模拟），查询返回对应的账户名称。
&lt;img src=&#34;ea627b4bd4f84a360a6ab7657e531530-20210924202843280.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/sinkService&amp;quot; -X POST --data &#39;{&amp;quot;accountNo&amp;quot;:&amp;quot;003&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;9856ede98cf2492c9d17db5e86e53752&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630474662509,
  &amp;quot;data&amp;quot;: {
    &amp;quot;accountName&amp;quot;: &amp;quot;张三&amp;quot;,
    &amp;quot;accountNo&amp;quot;: &amp;quot;003&amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;24-聚合服务调用delayserviceclient接口服务&#34;&gt;24 聚合服务调用DelayServiceClient接口服务&lt;/h3&gt;
&lt;p&gt;通过Biz-SIP的开放API接口，在脚本服务中调用SAF服务，对server3服务进行多达5次的服务重试调用。
&lt;img src=&#34;0d505c56488b51d0744b118feb884530.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上送请求数据说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“maxRetryNum”为最大请求次数&lt;/li&gt;
&lt;li&gt;“result”为最后的响应为成功还是失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:/sample/service5&amp;quot; -X POST --data &#39;{&amp;quot;method&amp;quot;:&amp;quot;notify&amp;quot;,&amp;quot;maxRetryNum&amp;quot;:3,&amp;quot;result&amp;quot;:&amp;quot;success&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: null,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;63cd38f36fa647cf9be0403c81e2c058&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630541890888,
  &amp;quot;data&amp;quot;: {
    &amp;quot;method&amp;quot;: &amp;quot;notify&amp;quot;,
    &amp;quot;className&amp;quot;: &amp;quot;com.bizmda.bizsip.sample.sink.api.SinkInterface1&amp;quot;,
    &amp;quot;params&amp;quot;: [
      3,
      &amp;quot;success&amp;quot;
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>系统配置</title>
      <link>http://bizsip.bizmda.com/doc/configuation/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://bizsip.bizmda.com/doc/configuation/</guid>
      <description>&lt;p&gt;Biz-SIP中间件通过配置来构建系统的介绍。&lt;/p&gt;
&lt;h2 id=&#34;一概述&#34;&gt;一、概述&lt;/h2&gt;
&lt;p&gt;Biz-SIP中间件在开发应用时，主要涉及配置文件编写和Java代码开发，系统架构如下所示：
&lt;img src=&#34;1632227276119-7bdc5979-8ddf-4498-84db-14fbbf44f203.png&#34; alt=&#34;image.png&#34;&gt;
上图中蓝色虚框所呈现的部分，就主要是Biz-SIP中间件的配置文件。
Biz-SIP中间件的配置文件，一般都统一存放在配置目录下（由application.yml文件中的bizsip.config-path配置项所约定)，配置目录中的文件如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config
|____sink.yml
|____source.yml
|____service.yml
|____converter
| |____server3
| | |____woman.vm
| | |____error.vm
| | |____man.vm
|____service
| |____client1
| | |____error.script
| |____openapi
| | |____sample1.script
| | |____sample5.script
| | |____sample2.script
| | |____sample4.script
|____check-rule
| |____client1
| | |____sample1.yaml

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sink.yml：领域层sink模块的配置文件
source.yml：渠道层source模块的配置文件
service.yml：应用层app聚合服务的的配置文件（非脚本的服务）
service目录：存放所有的应用层app聚合服务编排脚本
converter目录：存放消息转换器converter相关的消息格式转换配置文件
check-rule目录：存放聚合服务校验规则配置文件&lt;/p&gt;
&lt;h2 id=&#34;二应用层app配置服务编排配置&#34;&gt;二、应用层app配置（服务编排配置）&lt;/h2&gt;
&lt;h3 id=&#34;1-serviceyml&#34;&gt;1. service.yml&lt;/h3&gt;
&lt;p&gt;定义了所有非脚本类聚合服务的配置参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].bizServiceId&lt;/td&gt;
&lt;td&gt;聚合服务ID，要全局唯一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].type&lt;/td&gt;
&lt;td&gt;聚合服务执行调用方式，目前支持“integrator-bean-service”、“bean-service”、“sink-service”三种方式：&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1、integrator-bean-service：该类型执行继承BizServiceInterface接口的SpringBean，并调用约定的doBizService()方法。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;相关参数如下：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].className&lt;/td&gt;
&lt;td&gt;要执行的SpringBean类名（从BizServiceInterface接口继承）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2、bean-service：该类型执行约定的SpringBean，调用的方法和参数通过消息传递过来，方法名为消息体JSON数据中的“methodName”域，参数为消息体JSON数据中的“params”域（应为JSON数组）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].className&lt;/td&gt;
&lt;td&gt;要执行的SpringBean类名，由用户自行定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3、sink-service：直接把后端的sink服务，通过此接口通过聚合服务暴露出来&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].sinkId&lt;/td&gt;
&lt;td&gt;该聚合服务所对应的sink id，此聚合服务的数据会直接透传给sink id所对应的Sink后端。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;11-integrator-bean-service&#34;&gt;1.1 integrator-bean-service&lt;/h4&gt;
&lt;p&gt;该类型执行继承BizServiceInterface接口的SpringBean，并调用约定的doBizService()方法，配置参数如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].className&lt;/td&gt;
&lt;td&gt;要执行的SpringBean类名（从BizServiceInterface接口继承）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;service.yml配置例子如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- bizServiceId: /sample/service4
  type: integrator-bean-service
  className: com.bizmda.bizsip.integrator.sample.service.sample.IntegratorService4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;className是服务绑定的类，这个类需要从IntegratorBeanInterface接口继承，接口如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IntegratorBeanInterface {
    /**
     * 执行聚合服务
     * @param message 传入的消息
     * @return 返回的消息
     */
    public abstract BizMessage&amp;lt;JSONObject&amp;gt; doBizService(BizMessage&amp;lt;JSONObject&amp;gt; message) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;12-bean-service&#34;&gt;1.2 bean-service&lt;/h4&gt;
&lt;p&gt;该类型执行约定的SpringBean，调用的方法和参数通过消息传递过来，方法名为消息体JSON数据中的“methodName”域，参数为消息体JSON数据中的“params”域（应为JSON数组），配置参数如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].className&lt;/td&gt;
&lt;td&gt;要执行的SpringBean类名，方法由开发者自由定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;service.yml配置例子如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- bizServiceId: /springbean
  type: bean-service
  className: com.bizmda.bizsip.integrator.sample.service.sample.SinkClientInterface1Impl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;className是服务绑定的类，这个类的接口需要由开发者约定Interface并实现。&lt;/p&gt;
&lt;h4 id=&#34;13-sink-service&#34;&gt;1.3 sink-service&lt;/h4&gt;
&lt;p&gt;sink-server是直接把后端的sink服务，通过此接口通过聚合服务暴露出来。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].sinkId&lt;/td&gt;
&lt;td&gt;该聚合服务所对应的sink id，此聚合服务的数据会直接透传给sink id所对应的Sink后端。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;service.yml配置例子如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- bizServiceId: /sinkService
  type: sink-service
  sinkId: sink1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-service目录&#34;&gt;2. service目录&lt;/h3&gt;
&lt;p&gt;service目录位置配置文件根目录下的/service目录，目录下存放了聚合服务脚本，聚合服务ID为“目录+文件前缀”的方案，例如“service/openapi/sample1.script”文件，对应的聚合服务ID为“openapi/sample1”，文件的后续名表示是支持不同的服务聚合器类型，目前仅支持script服务聚合器（*.script）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config
|____sink.yml
|____source.yml
|____converter
|____service
| |____client1
| | |____error.script
| |____openapi
| | |____sample1.script
| | |____sample5.script
| | |____sample2.script
| | |____sample4.script
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-script服务聚合器脚本script&#34;&gt;3. Script服务聚合器脚本（*.script）&lt;/h3&gt;
&lt;p&gt;Script服务整合器是构建在magic-script脚本解析器基础上的服务编排引擎，通过解释执行service目录下的*.script文件，实现内外部服务整合和编排运行。
service目录下所有的“*.script”文件，都是Script服务整合器脚本。脚本语言采用magic-script（&lt;a href=&#34;https://gitee.com/ssssssss-team/magic-script&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gitee.com/ssssssss-team/magic-script&lt;/a&gt;），这是一款基于JVM的脚本语言。
在Script服务整合器脚本中，主要使用的特殊对象包括：sip对象、log对象等。&lt;/p&gt;
&lt;h4 id=&#34;31-sip对象&#34;&gt;3.1 sip对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;sip.callSink(sinkId,inData)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行适配器服务调用
参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sinkId：Sink ID，在sink.yml配置文件中约定。&lt;/li&gt;
&lt;li&gt;inData：传送给服务端的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端返回的数据，是BizMessage内部消息类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;sipdodelayserviceserviceidindatadelaymilliseconds1delaymilliseconds2&#34;&gt;sip.doDelayService(serviceId,inData,delayMilliseconds1,delayMilliseconds2&amp;hellip;)&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行SAF服务调用
参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;serviceId：SAF服务ID，为配置在config/script中的服务脚本。&lt;/li&gt;
&lt;li&gt;inData：传送给服务的数据，在脚本中以“bizmessage”进行存取。&lt;/li&gt;
&lt;li&gt;delayMilliseconds&amp;hellip;：延迟毫秒数，可以有多个，分别代表第1次、第2次&amp;hellip;..的服务延迟毫秒数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SAF子交易的BizMessage内部消息类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;sipgetserviceretrycount&#34;&gt;sip.getServiceRetryCount()&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取SAF服务的当前重试次数
参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（无）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SAF服务的当前重试次数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;sipsaveasynccontexttransactionkeycontexttimeout&#34;&gt;sip.saveAsyncContext(transactionKey,context,timeout)&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;保存异步服务上下文
参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transactionKey：异步回调的全局唯一交易索引键&lt;/li&gt;
&lt;li&gt;context：注入回调聚合服务的上下文变量&lt;/li&gt;
&lt;li&gt;timeout：异步服务超时时间，单位（秒）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（无）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;siploadasynccontexttransactionkey&#34;&gt;sip.loadAsyncContext(transactionKey)&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;保存异步服务上下文
参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transactionKey：异步回调的全局唯一交易索引键&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步服务上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-log对象&#34;&gt;3.2 log对象&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 使用方法与SLF4J完全一致
log.info(&#39;Hello&#39;);
log.info(&#39;Hello {}&#39;,&#39;MagicAPI&#39;);
log.debug(&#39;test&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;33-db对象&#34;&gt;3.3 db对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;select&#34;&gt;select&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;入参：&lt;code&gt;sql&lt;/code&gt;:&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值：&lt;code&gt;List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数说明：查询&lt;code&gt;List&lt;/code&gt;结果&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;return db.select(&#39;select * from sys_user&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;selectint&#34;&gt;selectInt&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;入参：&lt;code&gt;sql&lt;/code&gt;:&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值：&lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数说明：查询&lt;code&gt;int&lt;/code&gt;结果&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;//需要保证结果返回一行一列
return db.selectInt(&#39;select count(*) from sys_user&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;selectone&#34;&gt;selectOne&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;入参：&lt;code&gt;sql&lt;/code&gt;:&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值：&lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数说明：查询单个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;return db.selectOne(&#39;select * from sys_user limit 1&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;selectvalue&#34;&gt;selectValue&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;入参：&lt;code&gt;sql&lt;/code&gt;:&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值：&lt;code&gt;Object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数说明：查询单个值&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;//需要保证结果返回一行一列 
return db.selectValue(&#39;select user_name from sys_user limit 1&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;page&#34;&gt;page&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;入参：&lt;code&gt;sql&lt;/code&gt;:&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;入参：&lt;code&gt;limit&lt;/code&gt; : &lt;code&gt;long&lt;/code&gt; 可省略&lt;/li&gt;
&lt;li&gt;入参：&lt;code&gt;offset&lt;/code&gt; : &lt;code&gt;long&lt;/code&gt; 可省略&lt;/li&gt;
&lt;li&gt;返回值：&lt;code&gt;Object&lt;/code&gt; 默认返回为Object，如果自定义了分页结果，则返回自定义结果&lt;/li&gt;
&lt;li&gt;函数说明：分页查询&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;//需要保证结果返回一行一列 
return db.page(&#39;select * from sys_user&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;update&#34;&gt;update&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;入参：&lt;code&gt;sql&lt;/code&gt;:&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值：&lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数说明：执行增删改操作&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;return db.update(&#39;delete from sys_user&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;cache&#34;&gt;cache&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;入参：&lt;code&gt;cacheName&lt;/code&gt;:&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;入参：&lt;code&gt;ttl&lt;/code&gt;:&lt;code&gt;long&lt;/code&gt; 缓存有效期，单位毫秒，可省略，默认为配置的值&lt;/li&gt;
&lt;li&gt;返回值：&lt;code&gt;db&lt;/code&gt; //返回当前实例，即可以链式调用&lt;/li&gt;
&lt;li&gt;函数说明：使用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;//使用缓存名为user的查询
return db.cache(&#39;user&#39;).select(&#39;select * from sys_user&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;transaction&#34;&gt;transaction&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;入参：&lt;code&gt;callback&lt;/code&gt;:&lt;code&gt;Function&lt;/code&gt;，回调函数，可省略&lt;/li&gt;
&lt;li&gt;返回值：&lt;code&gt;Object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数说明：开启事务&lt;/li&gt;
&lt;li&gt;自动事务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var val = db.transaction(()=&amp;gt;{
    var v1 = db.update(&#39;...&#39;);
    var v2 = db.update(&#39;....&#39;);
    return v2;
});
return val;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;手动开启事务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var tx = db.transaction();  //开启事务
try{
    var value = db.update(&#39;...&#39;);
    db.commit();    // 提交事务
    return value;
}catch(e){
    db.rollback();  // 回滚事务
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;34-redis对象&#34;&gt;3.4 redis对象&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var data = bizmessage.data;
var value = data.accountNo;
//通过redis.命令名(命令参数,命令参数,.....,命令参数) 进行调用，其中命令名不区分大小写
redis.set(&#39;key&#39;,value); //调用set命令
//redis.setex(&#39;key&#39;,10,value);    //调用setex命令
data.accountName = redis.get(&#39;key&#39;);    //调用get命令
return data;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三适配层source配置服务接入配置&#34;&gt;三、适配层source配置（服务接入配置）&lt;/h2&gt;
&lt;p&gt;source.yml定义了客户端适配器的配置参数，并不是所有适配层的接入模块都需要在source.yml中定义，只有用到可配置的消息转换器converter时，才需要定义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].id&lt;/td&gt;
&lt;td&gt;客户端的ID，要全局唯一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter&lt;/td&gt;
&lt;td&gt;参见：消息处理器配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].service&lt;/td&gt;
&lt;td&gt;聚合服务相关配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].service-rules[]&lt;/td&gt;
&lt;td&gt;聚合服务定位断言规则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].service-rules[].predicate&lt;/td&gt;
&lt;td&gt;断言规则，返回true选择当前规则rule作为聚合服务ID，空条件为true，支持EL表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].service-rules[].rule&lt;/td&gt;
&lt;td&gt;当前断言规则对应的聚合服务ID，支持EL表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: source1
  converter:
    type: simple-json
  service:
    service-rules:
      - predicate: &#39;#{#data[serviceId] != null}&#39;
        rule: &#39;#{#data[serviceId]}&#39;
      - predicate:
        rule: source1/error
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四领域层sink配置服务调用配置&#34;&gt;四、领域层sink配置（服务调用配置）&lt;/h2&gt;
&lt;p&gt;sink.yml定义了所有接入的服务端适配器的配置参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].id&lt;/td&gt;
&lt;td&gt;服务端的ID，要全局唯一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].type&lt;/td&gt;
&lt;td&gt;服务端适配器调用方式，目前只支持“rest”，为RESTful方式调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].url&lt;/td&gt;
&lt;td&gt;服务端适配器调用方式为“rest”方式时，该属性约定RESTful调用的url地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter&lt;/td&gt;
&lt;td&gt;参见：消息处理器配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector&lt;/td&gt;
&lt;td&gt;服务端协议处理器相关配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.type&lt;/td&gt;
&lt;td&gt;约定服务端协议处理器的类型（具体参见服务端协议处理器配置）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.*&lt;/td&gt;
&lt;td&gt;约定服务端协议处理器的其它参数（具体参见服务端协议处理器配置）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: sink1
  type: rest
  url: http://bizsip-sample-sink/sink1
  converter:
    type: simple-json
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.CrmServer

- id: sink2
  type: rest
  url: http://bizsip-sample-sink/sink2
  converter:
    type: simple-json
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.ActServer
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;五适配层source领域层sink-converter配置消息适配&#34;&gt;五、适配层source/领域层sink converter配置（消息适配）&lt;/h2&gt;
&lt;h3 id=&#34;1-sourceymlsinkyml&#34;&gt;1 source.yml/sink.yml&lt;/h3&gt;
&lt;p&gt;source.yml和sink.yml文件中定义了消息转换器相关配置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].converter&lt;/td&gt;
&lt;td&gt;Source模块/Sink模块的消息格式相关配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter.type&lt;/td&gt;
&lt;td&gt;Source模块/Sink模块的消息转换类型，目前支持：simple-json、simple-xml、velocity-json、velocity-xml、fixed-length、velocity-split等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter.pack-rules[]（可选）&lt;/td&gt;
&lt;td&gt;消息打包规则，选择打包格式文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter.pack-rules[].predicate&lt;/td&gt;
&lt;td&gt;断言规则，返回true选择当前规则rule作为打包格式文件，空条件为true，支持EL表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter.pack-rules[].rule&lt;/td&gt;
&lt;td&gt;消息格式文件，支持EL表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter.unpack-rules[]（可选）&lt;/td&gt;
&lt;td&gt;消息解包规则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter.unpack-rules[].predicate&lt;/td&gt;
&lt;td&gt;断言规则（同上）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].converter.unpack-rules[].rule&lt;/td&gt;
&lt;td&gt;消息格式文件（同上）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;消息转换类型，目前支持simple-json、simple-xml、velocity-json、velocity-xml、fixed-length、velocity-split、iso-8583等7种方式，这7种消息转换类型的说明和针对打包、解包规则说明如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;消息转换类型&lt;/th&gt;
&lt;th&gt;消息转换说明&lt;/th&gt;
&lt;th&gt;消息转换描述&lt;/th&gt;
&lt;th&gt;消息打包规则&lt;/th&gt;
&lt;th&gt;消息解包规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;simple-json&lt;/td&gt;
&lt;td&gt;支持快速简单的JSON报文适配&lt;/td&gt;
&lt;td&gt;打包：直接输出内部标准JSON报文&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解包：直接对传入JSON进行解包&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;simple-xml&lt;/td&gt;
&lt;td&gt;支持快速简单的XML报文适配&lt;/td&gt;
&lt;td&gt;打包：直接把内部标准JSON报文转换成XML格式输出&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解包：对传入XML直接解包成内部标准JSON报文&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;velocity-json&lt;/td&gt;
&lt;td&gt;支持基于Velocity模板的JSON报文适配&lt;/td&gt;
&lt;td&gt;打包：根据断言规则定位的Velocity模板文件进行打包&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解包：直接对传入JSON进行解包&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;velocity-xml&lt;/td&gt;
&lt;td&gt;支持基于Velocity模板的XML报文适配&lt;/td&gt;
&lt;td&gt;打包：根据断言规则定位的Velocity模板文件，进行打包&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解包：对传入XML直接解包成内部标准JSON报文&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fixed-length&lt;/td&gt;
&lt;td&gt;支持基于配置的定长报文适配&lt;/td&gt;
&lt;td&gt;打包：根据断言规则定位的打包文件，文件是基于域级打包配置参数定制的&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解包：基于预解包域级配置，并根据断言规则 定位的解包文件，文件是基于域级配置参数配置的&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;velocity-split&lt;/td&gt;
&lt;td&gt;支持基于配置和Velocity模板的有分隔符报文适配&lt;/td&gt;
&lt;td&gt;打包：根据断言规则定位的Velocity模板文件进行打包&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解包：基于多级分隔符配置的解包&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iso-8583&lt;/td&gt;
&lt;td&gt;支持基于配置的ISO8583报文适配&lt;/td&gt;
&lt;td&gt;打包：根据sink.yml中的fields、destination-id、source-id配置进行打包；&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解包：根据sink.yml中的fields配置进行解包&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-converter目录&#34;&gt;2 converter目录&lt;/h3&gt;
&lt;p&gt;“config/converter”目录，存放了各种消息的格式转换配置文件，目前支持的文件类型有“&lt;em&gt;.vm”和“&lt;/em&gt;.yml”。
对于消息格式转换类型有打包和解包规则 的，会根据断言规则定位，到message目录下用对应的文件来加载对应的格式转换配置，如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;config/converter
├── server3
│   ├── error.vm
│   ├── man.vm
│   └── woman.vm
├── server4
│   ├── man.yml
│   └── woman.yml
└── server5
    ├── error.vm
    ├── man.vm
    └── woman.vm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文件类型和消息转换类型的关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*.vm：Velocity模板文件
&lt;ul&gt;
&lt;li&gt;velocity-json消息转换类型中的打包模板&lt;/li&gt;
&lt;li&gt;velocity-xml消息转换类型中的打包模板&lt;/li&gt;
&lt;li&gt;velocity-split消息转换类型中的打包模板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;*.yml：YML配置文件
&lt;ul&gt;
&lt;li&gt;fix-length消息转换类型中的打包和解包参数配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;21-velocity-jsonvelocity-xmlvm&#34;&gt;2.1 velocity-json/velocity-xml（*.vm）&lt;/h4&gt;
&lt;p&gt;对于消息转换类型为velocity-json、velocity-xml的，会根据断言规则定位，到converter目录下用对应的vm文件进行消息打包，如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config
|____converter
| |____sink4
| | |____woman.vm
| | |____error.vm
| | |____man.vm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vm文件支持velocity模板语言进行处理，模板中注入变量有：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;变量说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;BizMessage.data：内部标准消息的数据体，为JSONObject对象格式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;22-fixed-lengthyml&#34;&gt;2.2 fixed-length(*.yml）&lt;/h4&gt;
&lt;p&gt;对于消息转换类型为fixed-length，会根据断言规则 定位，到converter目录下用对应的yml文件进行打包和解包，如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config
|____converter
| |____sink6
| | |____woman.yml
| | |____error.yml
| | |____man.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;yml配置文件如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: sex
  length: 1
- name: accountNo
  length: 8
  unpack-functions:
    - name: trim
- name: accountName
  length: 10
  unpack-functions:
    - name: trim
- name: balance
  length: 10
  pack-functions:
    - name: decimalFormat
      args:
        - &amp;quot;###,###.00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相关配置域属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置域&lt;/th&gt;
&lt;th&gt;域说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;对应内部标准消息格式中的JSON域名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;length&lt;/td&gt;
&lt;td&gt;域值所占长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unpack-functions&lt;/td&gt;
&lt;td&gt;解包函数，支持多个函数，多个函数会按序执行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pack-functions&lt;/td&gt;
&lt;td&gt;打包函数，同样支持多个函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3-converter介绍&#34;&gt;3 Converter介绍&lt;/h3&gt;
&lt;h4 id=&#34;31-simple-json简单json格式适配&#34;&gt;3.1 simple-json（简单JSON格式适配）&lt;/h4&gt;
&lt;p&gt;支持快速、简单的JSON消息适配，直接把Biz-SIP内部标准消息，直接打包成外部的JSON格式；同时也直接把外部的JSON格式消息，快速直接解包成Biz-SIP内部标准消息。
可以在客户端适配器和服务端适配器中启用，配置如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: sink1
  type: rest
  url: http://bizsip-sample-sink/sink1
  converter:
    type: simple-json
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.CrmServer
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;32-simple-xml简单xml格式适配&#34;&gt;3.2 simple-xml（简单XML格式适配）&lt;/h4&gt;
&lt;p&gt;支持快速、简单的XML消息适配，直接把Biz-SIP内部标准消息，直接打包成外部的XML格式；同时也直接把外部的XML格式消息，快速直接解包成Biz-SIP内部标准消息。
可以在客户端适配器和服务端适配器中启用，配置如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: server3
  type: rest
  url: http://sip-sample-server/server3
  converter:
    type: simple-xml
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.EchoServer
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;33-velocity-json基于模板的json格式适配&#34;&gt;3.3 velocity-json（基于模板的JSON格式适配）&lt;/h4&gt;
&lt;p&gt;支持基于Velocity模板的JSON报文适配，在对外部的JSON报文打包，是采用Velocity模板文件，这个文件是通过打包断言规则来进行匹配的；外部JSON报文的解包，是直接解包成Biz-SIP内部标准消息的。
配置如下例所示，含有pack-rules：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: server4
  type: rest
  url: http://sip-sample-server/server4
  converter:
    type: velocity-json
    pack-rules:
      - predicate: &#39;#{#data[sex]==&amp;quot;0&amp;quot;}&#39;
        rule: server3/woman.vm
      - predicate: &#39;#{#data[sex]==&amp;quot;1&amp;quot;}&#39;
        rule: server3/man.vm
      - predicate:
        rule: server3/error.vm
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.EchoServer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Velocity模板中注入变量有：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;变量说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;BizMessage.data：内部标准消息的数据体，为JSONObject对象格式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;34-velocity-xml基于模板的xml适配&#34;&gt;3.4 velocity-xml（基于模板的XML适配）&lt;/h4&gt;
&lt;p&gt;支持基于Velocity模板的XML报文适配，在对外部的XML报文打包，是采用Velocity模板文件，这个文件是通过打包断言规则来进行匹配的；外部XML报文的解包，是直接解包成Biz-SIP内部标准消息的。
配置如下例所示，含有pack-rules：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: server5
  type: rest
  url: http://sip-sample-server/server5
  converter:
    type: velocity-xml
    pack-rules:
      - predicate: &#39;#{#data[sex]==&amp;quot;0&amp;quot;}&#39;
        rule: server3/woman.vm
      - predicate: &#39;#{#data[sex]==&amp;quot;1&amp;quot;}&#39;
        rule: server3/man.vm
      - predicate:
        rule: server3/error.vm
    unpack-rules:
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.EchoServer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Velocity模板中注入变量有：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;变量说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;BizMessage.data：内部标准消息的数据体，为JSONObject对象格式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;35-fixed-length定长消息适配&#34;&gt;3.5 fixed-length（定长消息适配）&lt;/h4&gt;
&lt;p&gt;支持基于配置的定长报文适配：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打包：根据断言规则定位的打包文件，文件是基于域级打包配置参数定制的&lt;/li&gt;
&lt;li&gt;解包：先基于域级配置进行消息报文的预解包，并根据断言规则 定位的解包文件，文件是基于域级配置参数配置的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置如下例所示，含有pre-unpack、pack-rules和unpack-rules：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: server6
  type: rest
  url: http://sip-sample-server/server6
  converter:
    type: fixed-length
    pre-unpack:
      - name: sex
        length: 1
        functions:
          - name: trim
    pack-rules:
      - predicate: &#39;#{#data[sex]==&amp;quot;0&amp;quot;}&#39;
        rule: server4/woman.yml
      - predicate: &#39;#{#data[sex]==&amp;quot;1&amp;quot;}&#39;
        rule: server4/man.yml
      - predicate:
        rule: server4/error.yml
    unpack-rules:
      - predicate: &#39;#{#data[sex]==&amp;quot;0&amp;quot;}&#39;
        rule: server4/woman.yml
      - predicate: &#39;#{#data[sex]==&amp;quot;1&amp;quot;}&#39;
        rule: server4/man.yml
      - predicate:
        rule: server4/error.yml
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.EchoServer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据解包和打包断言规则，定位报文对应的解包或打包定义yml定义文件，解包和打包定义文件如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: sex
  length: 1
- name: accountNo
  length: 8
  unpack-functions:
    - name: trim
- name: accountName
  length: 10
  unpack-functions:
    - name: trim
- name: balance
  length: 10
  pack-functions:
    - name: decimalFormat
      args:
        - &amp;quot;###,###.00&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要的配置定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].name&lt;/td&gt;
&lt;td&gt;域名，对应Biz-SIP内部标准消息中的域名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解包：表示当前数据从些域名中取得数据；&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;打包：表示数据对置入该域名对应的数据域。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].length&lt;/td&gt;
&lt;td&gt;当前域的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].unpack-functions[]（可选）&lt;/td&gt;
&lt;td&gt;解包时，对当前域域值进行处理的域处理函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].pack-functions[]（可选）&lt;/td&gt;
&lt;td&gt;打包时，对当前域域值进行处理的域处理函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中，unpack-functions、pack-functions，以及pre-unpack项下的functions，都是域处理函数，具体请参见“6.4 域处理函数”一节，相关配置定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;域处理函数，具体请参见域处理函数一节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;args[]&lt;/td&gt;
&lt;td&gt;域处理函数的参数，具体参数约定请参见域处理函数一节。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;fixed-length格式转换的解包流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据“pre-unpack”中的设置，首先对传入的定长消息进行预解包，先解出关键域的域值；&lt;/li&gt;
&lt;li&gt;根据“unpack-rule”，用上一步解出的关键域域值，根据解包断言规则，选择指定的解包yml定义文件；&lt;/li&gt;
&lt;li&gt;根据上一步选择的解包yml定义文件，对传入的定长消息进行解包，解包成Biz-SIP内部标准消息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打包流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据“pack-rule”，根据打包断言规则，选择指定的打包yml定义文件；&lt;/li&gt;
&lt;li&gt;根据上一步选择的打包yml定义文件，对Biz-SIP内部标准消息进行打包，打包成定长消息报文。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;36-velocity-split基于模板的有分隔符消息适配&#34;&gt;3.6 velocity-split（基于模板的有分隔符消息适配）&lt;/h4&gt;
&lt;p&gt;velocity-split消息适配，是针对有分隔符消息的转换和适配，打包是基于Velocity模板方式来进行转换的，解包是基于客户端适配器和服务端适配器的消息配置来转换的。
velocity-split消息适配的打包，是支持基于Velocity模板的适配，模板文件是通过打包断言规则来进行匹配的。
source.yml/sink.yml文件的配置如下例所示，含有separators和pack-rules的定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: server7
  type: rest
  url: http://sip-sample-server/server7
  converter:
    type: velocity-split
    separators:
      - &amp;quot;*&amp;quot;
      - &amp;quot;,&amp;quot;
    pack-rules:
      - predicate: &#39;#{#data[sex]==&amp;quot;0&amp;quot;}&#39;
        rule: server5/woman.vm
      - predicate: &#39;#{#data[sex]==&amp;quot;1&amp;quot;}&#39;
        rule: server5/man.vm
      - predicate:
        rule: server5/error.vm
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.EchoServer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要的配置定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].converter.separators&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;约定分隔符，可以设置多个分隔符。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;velocity-split格式转换的打包流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据“pack-rule”，执行打包断言规则，选择指定的打包vm定义文件；&lt;/li&gt;
&lt;li&gt;根据上一步选择的解包yml定义文件，对Biz-SIP内部标准消息进行打包，打包成有分隔符消息报文。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解包流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据“unpack-rule”，根据打包断言规则，选择指定的打包yml定义文件；&lt;/li&gt;
&lt;li&gt;根据source.yml/sink.yml文件中的separators设置，将有分隔符消息报文，直接解包到Biz-SIP内部标准消息报文。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;37-iso-8583iso8583消息适配&#34;&gt;3.7 iso-8583（ISO8583消息适配）&lt;/h4&gt;
&lt;p&gt;支持基于配置的ISO8583消息适配，打包和解包，都是根据sink.yml文件中对应sink的iso-8583报文和域配置信息，进行ISO8583报文的打包和解包。
sink.yml对应ISO8583报文配置，如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: sink13
  type: rest
  url: http://bizsip-sample-sink/sink13
  converter:
    type: iso-8583
    destination-id: &#39;00010344&#39;
    source-id: &#39;42430440&#39;
    fields:
      - index: 2
        length: 19
        unfixed: 2
        name: accNo2
      - index: 3
        length: 6
        name: processingCode3
      - index: 4
        length: 12
        name: amt_trans4
      - index: 5
        length: 12
        name: amt_settlmt5
      - index: 6
        length: 12
        name: transactionAmount6
      - index: 7
        length: 10
        name: transmsn_date_time7
      - index: 9
        length: 8
        name: transmsn_date_time9
      - index: 10
        length: 8
        name: transmsn_date_time10
      - index: 11
        length: 6
        name: systemTraceAuditNumber11
      - index: 12
        length: 6
        name: time_local_trans12
      - index: 13
        length: 4
        name: date_local_trans13
      - index: 14
        length: 4
        name: date_expr14
      - index: 15
        length: 4
        name: date_settlmt15
      - index: 16
        length: 4
        name: date_conv16
      - index: 18
        length: 4
        name: mchnt_type18
      - index: 19
        length: 3
        name: mchnt_cntry_code19
      - index: 22
        length: 3
        name: pos_entry_mode_code22
      - index: 23
        length: 3
        name: card_seq_num23
      - index: 25
        length: 2
        name: pos_cond_code25
      - index: 26
        length: 2
        name: pos_pin_cap_code26
      - index: 28
        length: 9
        name: amt_fee28
      - index: 32
        length: 11
        unfixed: 2
        name: acq_inst_id_code32
      - index: 33
        length: 11
        unfixed: 2
        name: fwd_inst_id_code33
      - index: 35
        length: 37
        unfixed: 2
        name: track2_data35
      - index: 36
        length: 104
        unfixed: 3
        name: track3_data36
      - index: 37
        length: 12
        name: retrivl_ref_num37
      - index: 38
        length: 6
        name: authr_id_resp38
      - index: 39
        length: 2
        name: resp_code39
      - index: 41
        length: 8
        name: card_accptr_termnl_id41
      - index: 42
        length: 15
        name: card_accptr_id42
      - index: 43
        length: 40
        name: card_accptr_name_loc43
      - index: 44
        length: 25
        unfixed: 2
        name: addtnl_resp_code44
      - index: 45
        length: 76
        unfixed: 2
        name: track1_data45
      - index: 48
        length: 512
        unfixed: 3
        name: addtnl_data_private48
      - index: 49
        length: 3
        name: currcy_code_trans49
      - index: 50
        length: 3
        name: currcy_code_settlmt50
      - index: 51
        length: 3
        name: currcy_code_cdhldr_bil51
      - index: 52
        length: 8
        name: pin_data52
      - index: 53
        length: 16
        name: security_control_info53
      - index: 54
        length: 40
        unfixed: 3
        name: addtnl_amt54
      - index: 55
        length: 255
        unfixed: 3
        name: ICC_data55
      - index: 56
        length: 255
        unfixed: 3
        name: token_par56
      - index: 57
        length: 100
        unfixed: 3
        name: issr_addtnl_data57
      - index: 59
        length: 600
        unfixed: 3
        name: detai_inquiring59
      - index: 60
        length: 100
        unfixed: 3
        name: reserved60
      - index: 61
        length: 200
        unfixed: 3
        name: ch_auth_info61
      - index: 62
        length: 200
        unfixed: 3
        name: switching_data62
      - index: 63
        length: 512
        unfixed: 3
        name: fin_net_data63
      - index: 70
        length: 3
        name: net_mgr_info_code70
      - index: 90
        length: 42
        name: ori_data_element90
      - index: 96
        length: 8
        name: msg_security_code96
      - index: 100
        length: 11
        unfixed: 2
        name: rcvg_inst_id_code100
      - index: 102
        length: 28
        unfixed: 2
        name: acct_id_1_102
      - index: 103
        length: 28
        unfixed: 2
        name: acct_id_2_103
      - index: 104
        length: 512
        unfixed: 3
        name: trans_industry_app_inf104
      - index: 113
        length: 512
        unfixed: 3
        name: add_data113
      - index: 117
        length: 256
        unfixed: 3
        name: addtnl_data117
      - index: 121
        length: 100
        unfixed: 3
        name: national_sw_resved121
      - index: 122
        length: 100
        unfixed: 3
        name: acq_inst_resvd122
      - index: 123
        length: 100
        unfixed: 3
        name: issr_inst_resvd123
      - index: 125
        length: 256
        unfixed: 3
        name: addtnl_data125
      - index: 128
        length: 8
        name: msg_authn_code128
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.EchoServer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要的配置定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].type&lt;/td&gt;
&lt;td&gt;约定为“iso-8583”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].destination-id&lt;/td&gt;
&lt;td&gt;配置ISO8583报文中的目的ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].source-id&lt;/td&gt;
&lt;td&gt;配置ISO8583报文中的源ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].fields&lt;/td&gt;
&lt;td&gt;ISO8583中各域的配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].fields[].index&lt;/td&gt;
&lt;td&gt;对应ISO8583报文中的域索引号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0：报文头，缺省域名为“msgHead”&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1：报文类型标识，缺省域名为“msgType”&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&amp;hellip;128：ISO8583域&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].fields[].name&lt;/td&gt;
&lt;td&gt;域名，主要在生成的JSON报文中用，报文头、报文类型标识缺省为msgHead、msgType，2&amp;hellip;128域缺省为f2&amp;hellip;f128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].fields[].length&lt;/td&gt;
&lt;td&gt;域长度，可变长度域为最大域长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].fields[].unfixed&lt;/td&gt;
&lt;td&gt;可变长度域类型，可以取值为2和3，代表长度位分别是2位和3位；如果不配置则为定长域。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-域处理函数&#34;&gt;4 域处理函数&lt;/h3&gt;
&lt;p&gt;域处理函数可以用在以下几个地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;预解包：一般定义在source.yml/sink.yml文件中的pre-unpack设置下的functions；&lt;/li&gt;
&lt;li&gt;解包：一般定义在解包yml文件中的unpack-functions；&lt;/li&gt;
&lt;li&gt;打包：一般定义在打包yml文件中的pack-functions。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;支持的域处理函数如下（可以自行扩展）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;域处理函数名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fill&lt;/td&gt;
&lt;td&gt;填充&lt;/td&gt;
&lt;td&gt;参数1（必选）：填充方式，left/right分别代表左填充和右填充&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;参数2（必选）：填充字符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;参数3（可选）：填充长度，缺省为当前域长度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trim&lt;/td&gt;
&lt;td&gt;去除空格&lt;/td&gt;
&lt;td&gt;参数1（可选）：left/right分别代表去左边空格和去右边空格，缺省为左右空格都去掉。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;decimalFormat&lt;/td&gt;
&lt;td&gt;对数字进行格式化&lt;/td&gt;
&lt;td&gt;参数1（必选）：根据Java中的DecimalFormat类格式，对数字进行格式化&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;六领域层sink-connector配置通讯适配&#34;&gt;六、领域层sink connector配置（通讯适配）&lt;/h2&gt;
&lt;h3 id=&#34;1-sink-bean-connector&#34;&gt;1 Sink-Bean Connector&lt;/h3&gt;
&lt;p&gt;相关配置参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.type&lt;/td&gt;
&lt;td&gt;约定为“sink-bean”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.class-name&lt;/td&gt;
&lt;td&gt;约定调用的java类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.spring-bean&lt;/td&gt;
&lt;td&gt;约定是否调用的是Spring容器Bean（缺省是非Spring容器Bean）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: server1
  type: rest
  url: http://sip-sample-server/server1
  converter:
    type: simple-json
  connector:
    type: sink-bean
    class-name: com.bizmda.bizsip.sample.sink.controller.CrmServer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sink-Bean Connector相关类，需要从以下接口来继续实现，一般开发人员会根据传入的参数，选择继承不同的接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用Biz-SIP标准的JSONObject来做入参、出参，一般是开发纯粹做交易处理的模块，可以开发并实现JSONObjectSinkBeanInterface接口的类，并挂接到Sink-Bean Connector上，JSONObjectSinkBeanInterface接口约定如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface JSONObjectSinkBeanInterface {
    /**
     * JSONObject SinkBean服务调用接口
     * @param packMessage 传入的消息
     * @return 返回值
     * @throws BizException
     */
    public JSONObject process(JSONObject packMessage) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;采用字节流byte[]来做入参、出参，一般是涉及到不同消息类型的转换，可以开发并实现SinkBeanInterface接口的类，并挂接到Sink-Bean Connector上，SinkBeanInterface接口约定如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface SinkBeanInterface {
    /**
     * Java服务调用接口
     * @param beforeJsonObject 打包前的JsonObject
     * @param packMessage 传入的消息
     * @return 返回值
     * @throws BizException
     */
    public byte[] process(JSONObject beforeJsonObject, byte[] packMessage) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外，如果要在process()前后，以及异常时做些个性化的开发切面，可以再加上SinkBeanAspectInterface接口的实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface SinkBeanAspectInterface {
    /**
     *
     * @param jsonObject 一般为convertor处理前传入的JSONObject
     * @return 经过处理后的JSONObject
     */
    public JSONObject beforeProcess(JSONObject jsonObject);

    /**
     *
     * @param beforeJsonObject 一般为convertor处理前传入的JSONObject
     * @param afterJsonObject 经过process()处理后返回的JSONObject
     * @return
     */
    public JSONObject afterProcess(JSONObject beforeJsonObject,JSONObject afterJsonObject);

    /**
     *
     * @param jsonObject 传入process()的JSONObject
     * @param bizException 在process()中抛出的异常
     */
    public void handleProcessException(JSONObject jsonObject,BizException bizException);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-bean-connector&#34;&gt;2 Bean Connector&lt;/h3&gt;
&lt;p&gt;Bean Connector能根据sink.yaml和传入数据中包含的约定参数，调用约定的Java类名方法名。
在服务编排脚本中，是通过传入JSON数据中的className、methodName、params，来分别约定调用的Java类外、方法名、参数列表，如果在sink.yml中配置了className和methodName，则以sink.yml中的配置为准，如下例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var data = {
    methodName: &amp;quot;getCustomerList&amp;quot;
};
var result = sip.callSink(&amp;quot;sink11&amp;quot;,data);

data = {
    methodName: &amp;quot;saveCustomerDto&amp;quot;,
    params: [&amp;quot;004&amp;quot;,&amp;quot;赵六&amp;quot;]
};
var result = sip.callSink(&amp;quot;sink11&amp;quot;,data);

data = {
    methodName: &amp;quot;getName&amp;quot;,
    params: &amp;quot;005&amp;quot;
};
var result = sip.callSink(&amp;quot;sink11&amp;quot;,data);

data = {
    methodName: &amp;quot;getAge&amp;quot;,
    params: &amp;quot;005&amp;quot;
};
var result = sip.callSink(&amp;quot;sink11&amp;quot;,data);

return result;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里有二点需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所对应的Sink，要求配置的converter一定是“simple-json”类型，其它类型的converter不支持。&lt;/li&gt;
&lt;li&gt;调用Sink后返回的结果，是用“result”作为根节点的JSON报文，如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;result&amp;quot;: [
        {
            &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
            &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;张三&amp;quot;,
            &amp;quot;age&amp;quot;: 20
        },
        {
            &amp;quot;sex&amp;quot;: &amp;quot;0&amp;quot;,
            &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;李四&amp;quot;,
            &amp;quot;age&amp;quot;: 30
        },
        {
            &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
            &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;王五&amp;quot;,
            &amp;quot;age&amp;quot;: 40
        }
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;result&amp;quot;: 30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应的调用Java类，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class JavaApiBean {
    public CustomerDto[] getCustomerList() {
		......
    }

    public void saveCustomerDto(String customerId,String name) {
        ......
    }

    public String getName(String id) {
        ......
    }

    public int getAge(String id) {
        ......
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果传入JSON数据中没有传入，则以sink.yaml中对应配置为准，相关配置参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.type&lt;/td&gt;
&lt;td&gt;约定为“bean”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.class-name&lt;/td&gt;
&lt;td&gt;设置调用的java类（可选）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.method-name&lt;/td&gt;
&lt;td&gt;设置调用的方法名（可选）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.spring-bean&lt;/td&gt;
&lt;td&gt;约定是否调用的是Spring容器Bean（缺省是非Spring容器Bean）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;## 测试调用Java API的Sink
- id: sink11
  type: rest
  url: http://bizsip-sample-sink/sink11
  converter:
    type: simple-json
  connector:
    type: bean
    class-name: com.bizmda.bizsip.sample.sink.javaapi.JavaApiBean
    method-name: getAge
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-netty-connector&#34;&gt;3 Netty Connector&lt;/h3&gt;
&lt;p&gt;相关配置参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.type&lt;/td&gt;
&lt;td&gt;约定为“netty”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.host&lt;/td&gt;
&lt;td&gt;约定调用的TCP主机地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.port&lt;/td&gt;
&lt;td&gt;约定调用的TCP端口地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: netty-server
  type: rest
  url: http://sip-sample-server/netty
  converter:
    type: simple-json
  connector:
    type: netty
    host: 127.0.0.1
    port: 10002
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-rabbitmq-connector&#34;&gt;4 RabbitMQ Connector&lt;/h3&gt;
&lt;p&gt;相关配置参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.type&lt;/td&gt;
&lt;td&gt;约定为“rabbitmq”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[].connector.route-key&lt;/td&gt;
&lt;td&gt;投递消息时的Route Key&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: sink9
  type: rest
  url: http://bizsip-sample-sink/sink9
  converter:
    type: simple-json
  connector:
    type: rabbitmq
    route-key: sink9
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;七典型source端适配器介绍与配置&#34;&gt;七、典型Source端适配器介绍与配置&lt;/h2&gt;
&lt;p&gt;对于一些常用的服务接入模式，提供了开箱即用的Source端适配器，可以直接拿来用，也可以在原有的基础上再做个性化改造。&lt;/p&gt;
&lt;h3 id=&#34;1-restful服务接入适配器&#34;&gt;1 RESTful服务接入适配器&lt;/h3&gt;
&lt;p&gt;RESTful服务接入适配器，是建立RESTful服务器来处理发来的RESTful消息，服务请求URL为“http://{地址}:{端口}/rest”，请求需要以“POST”方式来提交，适配器收到发来的消息后，会发给聚合服务整合器进行处理，并把处理结果同步返回给接入端。
客户端适配器代码放在“source/rest-source”模块中，启动运行程序为“RestSourceApplication.java”。
模块application.yml相关参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.config-path&lt;/td&gt;
&lt;td&gt;Biz-SIP中间件配置文件根目录位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.integrator-url&lt;/td&gt;
&lt;td&gt;服务聚合器的开放接口url地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.source-id&lt;/td&gt;
&lt;td&gt;客户端适配器ID，是在source.yml文件中定义的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-netty-tcp服务接入适配器&#34;&gt;2 Netty TCP服务接入适配器&lt;/h3&gt;
&lt;p&gt;Netty TCP服务接入适配器，是建立一个Netty服务器来侦听指定的端口，收到发来的TCP报文后，会发给聚合服务整合器进行处理，并把处理结果同步返回给接入端，可以支持Biz-SIP所有已支持的消息报文类型。
客户端适配器代码放在“source/netty-source”模块中，启动运行程序为“NettySourceApplication.java”。
模块application.yml相关参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.config-path&lt;/td&gt;
&lt;td&gt;Biz-SIP中间件配置文件根目录位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.integrator-url&lt;/td&gt;
&lt;td&gt;服务聚合器的开放接口url地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.source-id&lt;/td&gt;
&lt;td&gt;客户端适配器ID，是在source.yml文件中定义的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netty.port&lt;/td&gt;
&lt;td&gt;定义Netty TCP服务的侦听端口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;相关测试案例可以参见sample8。&lt;/p&gt;
&lt;h2 id=&#34;八服务校验规则&#34;&gt;八、服务校验规则&lt;/h2&gt;
&lt;p&gt;Biz-SIP中间件支持服务消息域校验规则和服务阻断校验规则，服务消息域校验规则能对上送域的域值进行合法性检验，对于不符合检验规则的消息，会直接在入口处拒绝。服务阻断检验规则能对服务上送数据进行检查，对不符合规则的服务，也会在入口处拒绝，类似于服务的风控系统。
服务检验规则，是配置在config/check-rule目录下，配置文件的目录和文件名和对应的服务脚本位置应一致，配置文件后缀为“.yml”，配置相关参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;field-check-rules&lt;/td&gt;
&lt;td&gt;定义域校验规则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;field-check-rules.[].field&lt;/td&gt;
&lt;td&gt;域的JSON取值Path，例如email、account[1].balance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;field-check-rules.[].rule&lt;/td&gt;
&lt;td&gt;域校验规则，具体参见域校验规则一节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;field-check-rules.[].args[]&lt;/td&gt;
&lt;td&gt;域检验规则的参数，具体参见域检验规则一节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;field-check-rules.[].message&lt;/td&gt;
&lt;td&gt;检验出错后，显示给调用方的错误消息。message可以嵌入域值，例如“不是邮箱地址:{}”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;field-check-mode&lt;/td&gt;
&lt;td&gt;域检验模式，主要有“one”和“all”这二种模式，“one”表示有一个域不满足，即返回错误，返回的错误只包括第一个不满足的原因信息；“all”表示返回错误会包括所有不满足的原因信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service-check-rules&lt;/td&gt;
&lt;td&gt;定义服务校验规则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service-check-rules.[].script&lt;/td&gt;
&lt;td&gt;服务检验脚本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service-check-rules.[].message&lt;/td&gt;
&lt;td&gt;检验出错后，显示给调用方的错误消息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service-check-mode&lt;/td&gt;
&lt;td&gt;服务校验模式，主要有“one”和“all”这二种模式，“one”表示有一个域不满足，即返回错误，返回的错误只包括第一个不满足的原因信息；“all”表示返回错误会包括所有不满足的原因信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;具体案例如下：
config/check-rule/openapi/sample1.yml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;field-check-rules:
  - field: email
    rule: isEmail
    message: &#39;不是邮箱地址:{}&#39;
  - field: sex
    rule: notEmpty
    message: &#39;不能为空&#39;
  - field: mobile
    rule: isMatchRegex
    args:
      - &#39;^[1][3,4,5,6,7,8,9][0-9]{9}$&#39;
    message: &#39;不是手机号{}&#39;
field-check-mode: one
service-check-rules:
  - script: if(data.sex == &#39;1&#39;)
            {return &#39;性别不符合!&#39;;}
    message: &#39;额度超限&#39;
service-check-mode: one
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;域检验规则：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;域校验规则&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;isCitizenId&lt;/td&gt;
&lt;td&gt;验证是否为身份证号码（支持18位、15位和港澳台的10位）&lt;/td&gt;
&lt;td&gt;（无）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isEmail&lt;/td&gt;
&lt;td&gt;验证是否为可用邮箱地址&lt;/td&gt;
&lt;td&gt;（无）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;notEmpty&lt;/td&gt;
&lt;td&gt;验证是否为空&lt;/td&gt;
&lt;td&gt;（无）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isMatchRegex&lt;/td&gt;
&lt;td&gt;通过正则表达式验证&lt;/td&gt;
&lt;td&gt;参数1：正则表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>系统开发</title>
      <link>http://bizsip.bizmda.com/doc/development/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://bizsip.bizmda.com/doc/development/</guid>
      <description>&lt;p&gt;介绍使用Java代码来开发基于Biz-SIP中间件的系统。&lt;/p&gt;
&lt;h2 id=&#34;一应用开发指南&#34;&gt;一、应用开发指南&lt;/h2&gt;
&lt;p&gt;Biz-SIP中间件在开发应用时，主要涉及配置文件编写和Java代码开发，系统架构如下所示：
&lt;img src=&#34;1632227276119-7bdc5979-8ddf-4498-84db-14fbbf44f203-20210924205613130.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中蓝底黑字所呈现的部分，就是需要Java代码开发的，涉及适配层、应用层和领域层。蓝色虚箭头线所涉及的接口，就是不同层次之间需要互相依赖的接口定义。&lt;/p&gt;
&lt;h3 id=&#34;1-渠道接入模块&#34;&gt;1. 渠道接入模块&lt;/h3&gt;
&lt;p&gt;渠道接入模块主要负责各种渠道的接入，主要功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;渠道接入的安全处理，包括报文加解密、加签解签；&lt;/li&gt;
&lt;li&gt;渠道接入的报文打包和解包；&lt;/li&gt;
&lt;li&gt;渠道接入的报文校验；&lt;/li&gt;
&lt;li&gt;渠道接入的交易处理，包括流水记录、风控处理、终端管理等；&lt;/li&gt;
&lt;li&gt;调用应用层服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;11-报文打包和解包&#34;&gt;1.1 报文打包和解包&lt;/h4&gt;
&lt;p&gt;平台提供JSON、XML、定长、有分隔符、ISO8583的格式转换器（converter），如果采用这些平台提供的converter，就需要约定Source ID。
如果采用编码实现报文打解包，就可以不考虑Source ID的约定。&lt;/p&gt;
&lt;h4 id=&#34;12-报文校验&#34;&gt;1.2 报文校验&lt;/h4&gt;
&lt;p&gt;在应用层中，有对应用层聚合服务的校验机制，包括域级校验和服务级校验，可以考虑统一在应用层进行报文检验。
但如果是仅针对于该特定渠道的报文校验，就只能考虑在渠道接入模块做了。&lt;/p&gt;
&lt;h4 id=&#34;13-交易处理&#34;&gt;1.3 交易处理&lt;/h4&gt;
&lt;p&gt;对于简单的交易处理，可以考虑用Spring Service来做交易处理。
在编码时注意，调用应用层聚合服务可能会导致时延较长，应避免在有数据库操作的Spring Service类中调用应用层聚合服务，并在有数据库操作的Spring Service类上尽量加@Transactional，以避免长时间锁表。&lt;/p&gt;
&lt;h4 id=&#34;14-调用应用层服务&#34;&gt;1.4 调用应用层服务&lt;/h4&gt;
&lt;p&gt;统一采用“SourceClientFactory.getBizServiceClient(Class&lt;T&gt; tClass,String bizServiceId)”来调用应用层聚合服务。
对于Sink服务，在渠道接入模块不要直接调用（也无法直接调用），可以在应用层定义关联些Sink服务的sink-service，来透传调用。&lt;/p&gt;
&lt;h3 id=&#34;2-第三方系统接入模块&#34;&gt;2. 第三方系统接入模块&lt;/h3&gt;
&lt;p&gt;第三方系统接入，主要包括以下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步调用第三方系统服务：标准的sink服务，在领域层进行封装sink服务。&lt;/li&gt;
&lt;li&gt;异步调用第三方系统服务：
&lt;ul&gt;
&lt;li&gt;通知第三方系统服务：简单的就是标准的sink服务，如果涉及存储转发，则需要使用延迟服务来进行没有收到接收回执后的重发操作。&lt;/li&gt;
&lt;li&gt;第三方系统调用我方服务：这种类型请参照上节对于渠道接入模块的介绍，这里不再展开讲。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要涉及的功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收Integrator发来的服务请求；&lt;/li&gt;
&lt;li&gt;第三方接入的安全处理，包括报文加解密、加签解签；&lt;/li&gt;
&lt;li&gt;第三方接入的报文打包和解包；&lt;/li&gt;
&lt;li&gt;第三方接入的交易处理，包括流水记录、风控处理等；&lt;/li&gt;
&lt;li&gt;异步回调现场恢复&lt;/li&gt;
&lt;li&gt;通知服务的存储转发&lt;/li&gt;
&lt;li&gt;事务完整性保障；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;21-接收integrator发来的服务请求&#34;&gt;2.1 接收Integrator发来的服务请求&lt;/h4&gt;
&lt;p&gt;Sink模块是通过connector接收Integrator发来的服务请求，connector主要有二种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bean：需要定义Interface接口类，一般在第三方渠道对接用得比较少；&lt;/li&gt;
&lt;li&gt;sink-bean：无需定义接口，根据需求也有二种类型的处理：
&lt;ul&gt;
&lt;li&gt;采用Biz-SIP标准的JSONObject来做入参、出参，一般不涉及到报文格式转换或报文格式转换由开发者自己编码完成，JSONObjectSinkBeanInterface接口约定如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface JSONObjectSinkBeanInterface {
    /**
     * JSONObject SinkBean服务调用接口
     * @param packMessage 传入的消息
     * @return 返回值
     * @throws BizException
     */
    public JSONObject process(JSONObject packMessage) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;采用字节流byte[]来做入参、出参，一般是涉及到不同消息类型的转换，SinkBeanInterface接口约定如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface SinkBeanInterface {
    /**
     * Java服务调用接口
     * @param beforeJsonObject 打包前的JsonObject
     * @param packMessage 传入的消息
     * @return 返回值
     * @throws BizException
     */
    public byte[] process(JSONObject beforeJsonObject, byte[] packMessage) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;22-报文打包和解包&#34;&gt;2.2 报文打包和解包&lt;/h4&gt;
&lt;p&gt;平台提供JSON、XML、定长、有分隔符的格式转换器（converter），如果采用这些平台提供的converter，就需要Sink实现SinkBeanInterface接口，传入参数是经过converter转换后的字节流byte[]。
如果由开发者自己编码实现报文打解包，建议Sink实现JSONObjectSinkBeanInterface接口，传入参数是平台约定的JSONObject。&lt;/p&gt;
&lt;h4 id=&#34;23-交易处理&#34;&gt;2.3 交易处理&lt;/h4&gt;
&lt;p&gt;对于简单的交易处理，可以考虑用SpringBean（@Service）来做交易处理。
在编码时注意，调用第三方应用时可能会导致时延较长，应避免在有数据库操作的SpringBean类中调用第三方应用服务，并在有数据库操作的SpringBean类上尽量加@Transactional，以避免长时间锁表。
另外，在实现SinkBeanInterface或JSONObjectSinkBeanInterface接口时，同时实现SinkBeanAspectInterface切面接口，也是一种简单的做法，并在切面方法中实现交易处理逻辑，并在方法上加@Transactional，以避免长时间锁表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface SinkBeanAspectInterface {
    /**
     *
     * @param jsonObject 一般为convertor处理前传入的JSONObject
     * @return 经过处理后的JSONObject
     */
    public JSONObject beforeProcess(JSONObject jsonObject);

    /**
     *
     * @param beforeJsonObject 一般为convertor处理前传入的JSONObject
     * @param afterJsonObject 经过process()处理后返回的JSONObject
     * @return
     */
    public JSONObject afterProcess(JSONObject beforeJsonObject,JSONObject afterJsonObject);

    /**
     *
     * @param jsonObject 传入process()的JSONObject
     * @param bizException 在process()中抛出的异常
     */
    public void handleProcessException(JSONObject jsonObject,BizException bizException);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;24-异步回调现场恢复&#34;&gt;2.4 异步回调现场恢复&lt;/h4&gt;
&lt;p&gt;通过领域层sink服务传出消息，应用层服务（也称为异步调用的前半段服务）即完成；再通过渠道接入模块再回调后半段服务（一般是另一个应用层服务）,存在恢复交易现场的操作，可以调用SipService.loadAsyncContext()来实现，这和接入第三方时调用的SipService.saveAsyncContext()是相配套的。&lt;/p&gt;
&lt;h4 id=&#34;25-通知服务的存储转发&#34;&gt;2.5 通知服务的存储转发&lt;/h4&gt;
&lt;p&gt;在应用层服务通过IntegratorClientFactory.getDelayBizServiceClient()发起延迟服务，实现通知服务的存储转发。&lt;/p&gt;
&lt;h4 id=&#34;26-事务完整性保障&#34;&gt;2.6 事务完整性保障&lt;/h4&gt;
&lt;p&gt;在应用层服务通过IntegratorClientFactory.getDelayBizServiceClient()发起延迟服务，来实现补偿，包括向前补偿和向后补偿这二种方式。&lt;/p&gt;
&lt;h3 id=&#34;3-交易处理模块&#34;&gt;3. 交易处理模块&lt;/h3&gt;
&lt;p&gt;交易处理模块就是一种特殊的Sink模块，是通过connector接收Integrator发来的服务请求，由于交易处理模块不涉及消息格式转换，所以connector主要有二种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bean：需要定义Interface接口类；&lt;/li&gt;
&lt;li&gt;sink-bean：采用Biz-SIP标准的JSONObject来做入参、出参，交易处理模块需要实现JSONObjectSinkBeanInterface接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;31-beaninterface接口类交易处理&#34;&gt;3.1 bean（Interface接口类交易处理）&lt;/h4&gt;
&lt;p&gt;采用bean类型connector，接口明确清晰，调用方一目了然，但需要调用双方提前约定Interface接口类。
在交易类型超过5个时，建议采用Command Executor（命令处理程序），分成多个xxxCmdExe类来进行处理，这些类应统一继承AbstractBeanCmdExe类。&lt;/p&gt;
&lt;h4 id=&#34;32-sink-beanjsonobject出入参交易处理&#34;&gt;3.2 sink-bean（JSONObject出入参交易处理）&lt;/h4&gt;
&lt;p&gt;采用sink-bean类型connector，接口不用提前约定，扩展性强，但缺点也是很明显，调用双方缺乏接口约定的机制。
在交易类型超过5个时，建议采用Command Executor（命令处理程序），分成多个xxxCmdExe类来进行处理，这些类应统一继承AbstractSinkBeanCmdExe类，并统一在execute()中实现业务逻辑处理。&lt;/p&gt;
&lt;h3 id=&#34;4-openapi接口模块&#34;&gt;4. OpenAPI接口模块&lt;/h3&gt;
&lt;p&gt;OpenAPI接口模块主要功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;敏感数据加解密及报文加签验签；&lt;/li&gt;
&lt;li&gt;RESTful接口封装；&lt;/li&gt;
&lt;li&gt;OpenAPI接口文档的生成；&lt;/li&gt;
&lt;li&gt;Sandbox；&lt;/li&gt;
&lt;li&gt;聚合服务的调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;41-restful接口封装和openapi接口文档&#34;&gt;4.1 RESTful接口封装和OpenAPI接口文档&lt;/h4&gt;
&lt;p&gt;根据接口要求开发controller类，并加上API注释，自动生成Swagger/Knife4j文档。&lt;/p&gt;
&lt;h4 id=&#34;42-聚合服务的调用&#34;&gt;4.2 聚合服务的调用&lt;/h4&gt;
&lt;p&gt;统一采用“SourceClientFactory.getBizServiceClient(Class&lt;T&gt; tClass,String bizServiceId)”来调用应用层聚合服务。&lt;/p&gt;
&lt;h3 id=&#34;5-应用层服务&#34;&gt;5. 应用层服务&lt;/h3&gt;
&lt;p&gt;应用层服务功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;领域层服务（Sink服务）的编排&lt;/li&gt;
&lt;li&gt;领域层服务（Sink服务）透传到适配层服务（Source服务和OpenAPI）&lt;/li&gt;
&lt;li&gt;存储转发服务的封装&lt;/li&gt;
&lt;li&gt;补偿交易的封装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用层服务，主要包括以下三类服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过sink-service透传的领域层sink服务：服务命名为”sink/xxx“，其中xxx和领域层服务xxx-sink前缀一致；&lt;/li&gt;
&lt;li&gt;只涉及某一个sink的延迟服务：服务命名为”sink/xxx-delay/&amp;hellip;“，其中xxx和领域层服务xxx-sink前缀一致，但涉及到多个sink聚合编排的延迟服务，应直接放在相关的聚合应用服务中；&lt;/li&gt;
&lt;li&gt;聚合应用服务：服务命名为”app/yyy/&amp;hellip;“，其中yyy是聚合应用服务名，涉及到多个sink聚合编排的延迟服务，也放在这里。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-项目依赖&#34;&gt;6. 项目依赖&lt;/h3&gt;
&lt;h4 id=&#34;61-适配层source模块&#34;&gt;6.1 适配层source模块&lt;/h4&gt;
&lt;p&gt;在pom.xml文件中添加source-spring-boot-starter依赖，以及应用层app模块和领域层sink模块相关联的client接口相关包：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.bizmda.bizsip&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;source-spring-boot-starter&amp;lt;/artifactId&amp;gt;
          	&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;62-应用层app模块&#34;&gt;6.2 应用层app模块&lt;/h4&gt;
&lt;p&gt;在pom.xml文件中添加integrator-spring-boot-starter依赖，以及领域层sink模块相关联的client接口相关包：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.bizmda.bizsip&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;integrator-spring-boot-starter&amp;lt;/artifactId&amp;gt;
          	&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;63-领域层sink模块&#34;&gt;6.3 领域层sink模块&lt;/h4&gt;
&lt;p&gt;在pom.xml文件中添加sink-spring-boot-starter依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.bizmda.bizsip&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;sink-spring-boot-starter&amp;lt;/artifactId&amp;gt;
          	&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7-各模块applicationyml配置&#34;&gt;7. 各模块application.yml配置&lt;/h3&gt;
&lt;h4 id=&#34;71-网关模块&#34;&gt;7.1 网关模块&lt;/h4&gt;
&lt;p&gt;Open API网关只在Spring Cloud版本中存在，在Spring Boot版本中不需要部署。
api-gateway模块中的application.yml：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;server.port&lt;/td&gt;
&lt;td&gt;为api-gateway网关的侦听端口，建议用8000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spring.cloud.nacos.discovery.server-addr&lt;/td&gt;
&lt;td&gt;Nacos服务端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spring.cloud.gateway.routes&lt;/td&gt;
&lt;td&gt;为配置转发给Integrator服务整合器的路由断言，建议不要修改。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
  port: 8000

spring:
  application:
    name: bizsip-api-gaetway

  cloud:
    nacos:
      discovery:
        server-addr: bizsip-nacos:8848

    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: bizsip-integrator
          uri: lb://bizsip-integrator
          predicates:
            - Path=/api/**

logging:
  level:
    com.bizmda.bizsip: debug

graceful:
  shutdown:
    enabled: true
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;72-适配层source模块&#34;&gt;7.2 适配层source模块&lt;/h4&gt;
&lt;p&gt;Source模块的application.yml中的主要相关参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.config-path&lt;/td&gt;
&lt;td&gt;Biz-SIP中间件配置文件根目录位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.integrator-url&lt;/td&gt;
&lt;td&gt;服务聚合器Integrator的接口url地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
  port: 8080

spring:
  application:
    name: bizsip-sample-source

  cloud:
    nacos:
      discovery:
        server-addr: bizsip-nacos:8848
  #  以下配置在Istio部署中打开，以不采用NACOS注册中心，而采用etcd注册机制
  #  cloud:
  #    service-registry:
  #      auto-registration:
  #        enabled: false  #禁用注册中心服务

bizsip:
  config-path: /var/bizsip/config
  integrator-url: http://bizsip-integrator/api

logging:
  level:
    com.bizmda.bizsip: debug

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;73-应用层app模块&#34;&gt;7.3 应用层app模块&lt;/h4&gt;
&lt;p&gt;应用层app Integrator模块中的application.yml中的主要相关参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.config-path&lt;/td&gt;
&lt;td&gt;Biz-SIP中间件配置文件根目录位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server.port&lt;/td&gt;
&lt;td&gt;服务整合器（Integrator）的微服务端口，建议用8888端口，避免和其它端口相冲突&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spring.cloud.nacos.discovery.server-addr&lt;/td&gt;
&lt;td&gt;Nacos服务端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spring.datasource.*&lt;/td&gt;
&lt;td&gt;数据库连接配置（用于服务脚本中db对象）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spring.redis.*&lt;/td&gt;
&lt;td&gt;redis连接配置（用于服务脚本中redis对象）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spring.rabbitmq.*&lt;/td&gt;
&lt;td&gt;RabbitMQ配置（用于事务管理器）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
  port: 8888

spring:
  application:
    name: bizsip-integrator

  cloud:
    nacos:
      discovery:
        server-addr: bizsip-nacos:8848
#  以下配置在Istio部署中打开，以不采用NACOS注册中心，而采用etcd注册机制
#  cloud:
#    service-registry:
#      auto-registration:
#        enabled: false  #禁用注册中心服务

  datasource:
    url: jdbc:mysql://bizsip-mysql/sip
    username: root
    password: bizsip123456
    driver-class-name: com.mysql.jdbc.Driver

  redis:
    redisson:
      enable: true
    host: bizsip-redis
    port: 6379
    timeout: 6000
    database: 0
    lettuce:
      pool:
        max-active: 10 # 连接池最大连接数（使用负值表示没有限制）,如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)
        max-idle: 8   # 连接池中的最大空闲连接 ，默认值也是8
        max-wait: 100 # # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
        min-idle: 2    # 连接池中的最小空闲连接 ，默认值也是0
      shutdown-timeout: 100ms

  rabbitmq:
    virtual-host: /
    host: bizsip-rabbitmq
    port: 5672
    username: springcloud
    password: springcloud
    listener:
      simple:
        concurrency: 5
        max-concurrency: 15
        prefetch: 10

bizsip:
  config-path: /var/bizsip/config

logging:
  level:
    com.bizmda.bizsip: debug

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;74-领域层sink模块&#34;&gt;7.4 领域层sink模块&lt;/h4&gt;
&lt;p&gt;领域层Sink应用的application.yml中的主要相关参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;配置说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.config-path&lt;/td&gt;
&lt;td&gt;Biz-SIP中间件配置文件根目录位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bizsip.sink-id（可选）&lt;/td&gt;
&lt;td&gt;sink-spring-boot-starter中自带通用SinkController对应的sink-id参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;只有启用SinkController才会配置该参数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;SinkController为通用的Sink处理模块，能接收来自Integrator发来服务，并根据sink.yml中Sink的配置自动进行相应处理，如果没有特殊的处理需求，一般建议直接采用SinkController即可。
要启用SinkController，需要在应用启动类中，加上对应的Spring类扫描路径（&amp;ldquo;com.bizmda.bizsip.sink.controller&amp;rdquo;）​：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@SpringBootApplication
@MapperScan(&amp;quot;com.xbank.infrastructure.db.customer.mapper&amp;quot;)
@ComponentScan(basePackages={&amp;quot;cn.hutool.extra.spring&amp;quot;,
        &amp;quot;com.bizmda.bizsip.sink.controller&amp;quot;, &amp;quot;com.xbank&amp;quot;})
@Import(cn.hutool.extra.spring.SpringUtil.class)
public class CustomerSinkApplication {
    public static void main(String[] args) {
        SpringApplication.run(CustomerSinkApplication.class, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
  port: 8001
spring:
  application:
    name: customer-sink

  cloud:
    nacos:
      discovery:
        server-addr: bizsip-nacos:8848

  datasource:
    url: jdbc:mysql://bizsip-mysql/xbank?autoReconnect=true
    username: root
    password: bizsip123456
    driver-class-name: com.mysql.cj.jdbc.Driver

bizsip:
  config-path: /Users/shizhengye/IdeaProjects/xbank/xbank-app/config
  sink-id: customer-sink

logging:
  level:
    com.bizmda.bizsip: debug
    com.xbank: trace
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8-命名规则&#34;&gt;8. 命名规则&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;规范&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;领域层服务（sink）&lt;/td&gt;
&lt;td&gt;xxx-sink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用层服务（service）&lt;/td&gt;
&lt;td&gt;sink/xxx&lt;/td&gt;
&lt;td&gt;通过sink-service透传到领域层的sink服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;sink/xxx-delay/&amp;hellip;&lt;/td&gt;
&lt;td&gt;某一个sink服务相关的延迟服务，这里的延迟服务只涉及到该sink的调用，不涉及其它sink服务的调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;app/yyy/&amp;hellip;&lt;/td&gt;
&lt;td&gt;封装的某一应用层服务集合，包括一系列相关应用层服务，涉及到多个sink服务的延迟服务，也放在这里。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;适配层服务（source）&lt;/td&gt;
&lt;td&gt;xxx-source&lt;/td&gt;
&lt;td&gt;涉及到消息格式转换配置时，才需要配置Source ID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;二调用sink服务和app服务&#34;&gt;二、调用Sink服务和App服务&lt;/h2&gt;
&lt;h3 id=&#34;1-source调用app服务&#34;&gt;1. Source调用App服务&lt;/h3&gt;
&lt;p&gt;统一采用“SourceClientFactory.getBizServiceClient(Class&lt;T&gt; tClass,String bizServiceId)”来调用应用层聚合服务（tClass必须是接口类），二种调用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口约定调用：由应用层定义接口调用的Interface接口类，由渠道接入模块所引用。如下例所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RestController
@RequestMapping(&amp;quot;/personal&amp;quot;)
public class PersonalController  {
    private PersonalAppInterface personalAppInterface = SourceClientFactory
            .getBizServiceClient(PersonalAppInterface.class,&amp;quot;app/personal&amp;quot;);
	...

    @GetMapping(value =&amp;quot;/getCustomerAndAccountList&amp;quot;)
    public CustomerAndAccountList getCustomerAndAccountList(String customerId) {
        return this.personalAppInterface.getCustomerAndAccountList(customerId);
    }

    @GetMapping(value =&amp;quot;/getAccountListByCustomerId&amp;quot;)
    public List&amp;lt;Account&amp;gt; getAccountListByCustomerId(String customerId) {
        return this.personalAppInterface.getAccountListByCustomerId(customerId);
    }

    @GetMapping(value =&amp;quot;/getCustomer&amp;quot;)
    public Customer getCustomer(String customerId) {
        return this.personalAppInterface.getCustomer(customerId);
    }
	...
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;非接口约定调用：采用平台通用JSONObject类型，Interface接口类统一采用BizMessageInterface接口类，并统一用call()来调用应用层聚合服务。如下例所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RestController
@RequestMapping(&amp;quot;/personal&amp;quot;)
public class PersonalController  {
    private BizMessageInterface payment1SinkInterface = SourceClientFactory
            .getBizServiceClient(BizMessageInterface.class,&amp;quot;sink/payment1&amp;quot;);
    ...
        
    @GetMapping(value =&amp;quot;/send2Payment&amp;quot;)
    public BizMessage&amp;lt;JSONObject&amp;gt; send2Payment(String message) throws BizException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;message&amp;quot;,message);
        return this.payment1SinkInterface.call(jsonObject);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-app调用sink服务&#34;&gt;2. App调用Sink服务&lt;/h3&gt;
&lt;p&gt;统一采用“IntegratorClientFactory.getSinkClient(Class&lt;T&gt; tClass,String sinkId)”来调用领域层Sink服务（tClass必须是接口类），有二种调用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口约定调用：由应用层定义接口调用的Interface接口类，由渠道接入模块所引用。如下例所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class PersonalAppService implements PersonalAppInterface {
    private AccountSinkInterface accountSinkInterface = IntegratorClientFactory
            .getSinkClient(AccountSinkInterface.class,&amp;quot;account-sink&amp;quot;);
    private CustomerSinkInterface customerSinkInterface = IntegratorClientFactory
            .getSinkClient(CustomerSinkInterface.class,&amp;quot;customer-sink&amp;quot;);
	...
        
    @Override
    public CustomerAndAccountList getCustomerAndAccountList(String customerId) {
        Customer customer = this.customerSinkInterface.getCustomer(customerId);
        List&amp;lt;Account&amp;gt; accountList = this.accountSinkInterface.getAccountListByCustomerId(customerId);
        CustomerAndAccountList customerAndAccountList = new CustomerAndAccountList();
        customerAndAccountList.setCustomer(customer);
        customerAndAccountList.setAccountList(accountList);
        return customerAndAccountList;
    }
	...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;非接口约定调用：采用平台通用JSONObject类型，Interface接口类统一采用BizMessageInterface接口类，并统一用call()来调用应用层聚合服务。如下例所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class PersonalAppService implements PersonalAppInterface {
	...
    private BizMessageInterface payment1SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment1-sink&amp;quot;);
    private BizMessageInterface payment2SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment2-sink&amp;quot;);
	...
    @Override
    public BizMessage&amp;lt;JSONObject&amp;gt; send2Payment1(Object message) throws BizException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;message&amp;quot;,message);
        return this.payment1SinkInterface.call(jsonObject);
    }

    @Override
    public BizMessage send2Payment2(String tranMode, String tranCode, Object message) throws BizException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;tranCode&amp;quot;,tranCode);
        jsonObject.set(&amp;quot;tranMode&amp;quot;,tranMode);
        jsonObject.set(&amp;quot;message&amp;quot;,message);
        return this.payment2SinkInterface.call(jsonObject);
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-app调用延迟服务&#34;&gt;3. App调用延迟服务&lt;/h3&gt;
&lt;p&gt;延迟服务也是位于应用层的App服务，延迟服务只能由应用层的App服务来进行嵌套调用，不能从适配层直接调用延迟服务。
App调用延迟服务，统一采用“IntegratorClientFactory.getDelayBizServiceClient(Class&lt;T&gt; tClass, String bizServiceId, int&amp;hellip; delayMilliseconds)”来调用（tClass必须是接口类），同样有接口约定调用和非接口约定调用二种方式，其中非接口约定调用是采用BizMessageInterface接口类，并统一用call()来调用应用层聚合服务，如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class PersonalAppService implements PersonalAppInterface {
    private AccountSinkInterface accountSinkInterface = IntegratorClientFactory
            .getSinkClient(AccountSinkInterface.class,&amp;quot;account-sink&amp;quot;);
    private CustomerSinkInterface customerSinkInterface = IntegratorClientFactory
            .getSinkClient(CustomerSinkInterface.class,&amp;quot;customer-sink&amp;quot;);
    private BizMessageInterface payment1SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment1-sink&amp;quot;);
    private BizMessageInterface payment2SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment2-sink&amp;quot;);
    private PersonalAppInterface personalAppDelayInterface = IntegratorClientFactory
            .getDelayBizServiceClient(PersonalAppInterface.class,&amp;quot;app/personal&amp;quot;,
                    0,1000,2000,4000,8000,16000,32000);
	...
    @Override
    public void payoutForward(String tranMode,String accountId, long amount) throws BizException {
        log.info(&amp;quot;account出金:{},{}&amp;quot;,accountId,amount);
        this.accountSinkInterface.payout(accountId,amount);
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;tranCode&amp;quot;,&amp;quot;pay&amp;quot;);
        jsonObject.set(&amp;quot;tranMode&amp;quot;,tranMode);
        jsonObject.set(&amp;quot;accountId&amp;quot;,accountId);
        jsonObject.set(&amp;quot;tranAmount&amp;quot;,amount);
        BizMessage&amp;lt;JSONObject&amp;gt; bizMessage = null;
        try {
            log.info(&amp;quot;payment缴费...&amp;quot;);
            bizMessage = this.payment2SinkInterface.call(jsonObject);
        } catch (BizException e) {
            if (e.isTimeOutException()) {
                log.info(&amp;quot;payment交易超时,开始payout补偿...&amp;quot;);
                this.personalAppDelayInterface.payoutForwardCompensate(jsonObject);
                return;
            }
            else {
                throw e;
            }
        }
        log.info(&amp;quot;payment缴费成功!&amp;quot;);
        log.info(&amp;quot;payout成功!&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三开发sink服务&#34;&gt;三、开发Sink服务&lt;/h2&gt;
&lt;p&gt;通过Java来开发的Sink服务，主要支持以下二类：sink-bean类型、bean类型。&lt;/p&gt;
&lt;h3 id=&#34;1-sink-bean类sink服务&#34;&gt;1. sink-bean类sink服务&lt;/h3&gt;
&lt;p&gt;sink-bean主要有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sink接口为标准的BizMessage&lt;JSONObject&gt;类型即可，其它没有格式约定；&lt;/li&gt;
&lt;li&gt;在sink.yml中配置”sink-bean“类型的connector，服务类支持JavaBean和SpringBean二种挂接方式；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sink-bean的实现，应基于&lt;SinkBeanInterface&gt;或&lt;JSONObjectSinkBeanInterface&gt;接口开发服务类，实现process()方法，2个接口区别在于出入参数的类型。&lt;/p&gt;
&lt;h4 id=&#34;11-实现jsonobjectsinkbeaninterface接口的sink服务&#34;&gt;1.1 实现&lt;JSONObjectSinkBeanInterface&gt;接口的sink服务&lt;/h4&gt;
&lt;p&gt;JSONObjectSinkBeanInterface接口中的process()出入参参数采用Biz-SIP标准的JSONObject：这种类型的sink服务一般不涉及到报文格式转换或报文格式转换由开发者自己编码完成，JSONObjectSinkBeanInterface接口约定如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface JSONObjectSinkBeanInterface {
    /**
     * JSONObject SinkBean服务调用接口
     * @param packMessage 传入的消息
     * @return 返回值
     * @throws BizException
     */
    public JSONObject process(JSONObject packMessage) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;举例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class Payment2SinkService implements JSONObjectSinkBeanInterface {
    @Autowired
    private TimeoutCmdExe timeoutCmdExe;
    @Autowired
    private TimeoutAndFailCmdExe timeoutAndFailCmdExe;
    @Autowired
    private TimeoutAndSuccessCmdExe timeoutAndSuccessCmdExe;
    @Autowired
    private SuccessCmdExe successCmdExe;

    @Override
    public JSONObject process(JSONObject jsonObject) throws BizException {
        log.info(&amp;quot;传入消息:\n{}&amp;quot;, jsonObject.toString());
        AbstractSinkBeanCmdExe sinkBeanCmdExe;
        String tranMode = (String)jsonObject.get(&amp;quot;tranMode&amp;quot;);
        switch (tranMode) {
            case &amp;quot;timeout&amp;quot;:
                // 收到交易后，永远返回超时
                return timeoutCmdExe.execute(jsonObject);
            case &amp;quot;3timeout-fail&amp;quot;:
                // 收到交易后，前3次返回超时，第4次返回失败码
                return timeoutAndFailCmdExe.execute(jsonObject);
            case &amp;quot;3timeout-success&amp;quot;:
                // 收到交易后，前3次返回超时，第4次成功返回原报文
                return timeoutAndSuccessCmdExe.execute(jsonObject);
            default:
                //其它情况,成功返回原报文
                return successCmdExe.execute(jsonObject);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;12-实现sinkbeaninterface接口的sink服务&#34;&gt;1.2 实现&lt;SinkBeanInterface&gt;接口的sink服务&lt;/h4&gt;
&lt;p&gt;SinkBeanInterface接口的process()出入参采用字节流byte[]：这种类型的sink服务一般是涉及到不同消息类型的转换，在sink.yml中支持多种convert，传入process()方法的参数为经过convert转换后的消息。SinkBeanInterface接口约定如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface SinkBeanInterface {
    /**
     * Java服务调用接口
     * @param beforeJsonObject 打包前的JsonObject
     * @param packMessage 传入的消息
     * @return 返回值
     * @throws BizException
     */
    public byte[] process(JSONObject beforeJsonObject, byte[] packMessage) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在process()方法中传入的beforeJsonObject参数，是传入sink但还没经过打包的JSONObject对象，packMessage参数已经根据sink的消息格式配置，完成了对于目标消息格式的转换。
举例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class Payment1SinkService implements SinkBeanInterface {
    @Override
    public byte[] process(JSONObject beforeJsonObject, byte[] inMessage) throws BizException {
        log.info(&amp;quot;传入消息:\n{}&amp;quot;, BizUtils.buildHexLog(inMessage));
        return inMessage;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;13-实现sinkbeanaspectinterface切面接口&#34;&gt;1.3 实现&lt;SinkBeanAspectInterface&gt;切面接口&lt;/h4&gt;
&lt;p&gt;在实现SinkBeanInterface或JSONObjectSinkBeanInterface接口时，可以通过实现SinkBeanAspectInterface切面接口，能在convertor处理前、处理后以及处理异常时实现注入逻辑，接口约定如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface SinkBeanAspectInterface {
    /**
     *
     * @param jsonObject 一般为convertor处理前传入的JSONObject
     * @return 经过处理后的JSONObject
     */
    public JSONObject beforeProcess(JSONObject jsonObject);

    /**
     *
     * @param beforeJsonObject 一般为convertor处理前传入的JSONObject
     * @param afterJsonObject 经过process()处理后返回的JSONObject
     * @return
     */
    public JSONObject afterProcess(JSONObject beforeJsonObject,JSONObject afterJsonObject);

    /**
     *
     * @param jsonObject 传入process()的JSONObject
     * @param bizException 在process()中抛出的异常
     */
    public void handleProcessException(JSONObject jsonObject,BizException bizException);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-bean类sink服务&#34;&gt;2. bean类sink服务&lt;/h3&gt;
&lt;p&gt;bean类sink服务有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sink接口为BizMessage&lt;JSONObject&gt;类型，JSONObject有格式要求，消息体中应包括：className（可选）、methodName（可选）、params（必选），params为JSONArray类型；&lt;/li&gt;
&lt;li&gt;可自由开发服务类；&lt;/li&gt;
&lt;li&gt;在sink.yml中配置”bean“类型的connector，服务类支持JavaBean和SpringBean二种挂接方式；&lt;/li&gt;
&lt;li&gt;在sink.yml中convert只支持simple-json类型（后期可能会取消对于bean类sink服务的convert配置）。&lt;/li&gt;
&lt;li&gt;bean类在开发时，一定要先定义一个Interface类，这个Interface类会被调用方（App应用层）所引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bean类sink服务，如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class AccountSinkService implements AccountSinkInterface {
    @Autowired
    private PayoutCmdExe payoutCmdExe;
    @Autowired
    private  PayoutCompensationCmdExe payoutCompensationCmdExe;
    @Autowired
    private GetAccountListByCustomerIdCmdExe getAccountListByCustomerIdCmdExe;

    @Override
    public List&amp;lt;Account&amp;gt; getAccountListByCustomerId(String customerId) {
        return this.getAccountListByCustomerIdCmdExe.getAccountListByCustomerId(customerId);
    }

    @Override
    public Account payout(String accountId, long amount) {
        return this.payoutCmdExe.payout(accountId,amount);
    }

    @Override
    public Account payoutCompensation(String accountId, long amount) {
        return this.payoutCompensationCmdExe.payoutCompensation(accountId,amount);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四开发app服务&#34;&gt;四、开发app服务&lt;/h2&gt;
&lt;p&gt;通过Java来开发的app服务，主要支持以下二类：integrator-bean-service类型、bean-service类型。&lt;/p&gt;
&lt;h3 id=&#34;1-integrator-bean-service类app服务&#34;&gt;1. integrator-bean-service类app服务&lt;/h3&gt;
&lt;p&gt;integrator-bean-service主要有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sink接口为标准的BizMessage&lt;JSONObject&gt;类型即可，其它没有格式约定；&lt;/li&gt;
&lt;li&gt;在service.yml中配置type为”integrator-bean-service“，服务类只支持SpringBean的挂接方式；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;integrator-bean-service的实现，应基于&lt;IntegratorBeanInterface&gt;接口开发服务类，实现doBizService()方法。
IntegratorBeanInterface接口约定如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IntegratorBeanInterface {
    /**
     * 执行聚合服务
     * @param message 传入的消息
     * @return 返回的消息
     */
    public abstract BizMessage&amp;lt;JSONObject&amp;gt; doBizService(BizMessage&amp;lt;JSONObject&amp;gt; message) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;举例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class IntegratorService3 implements IntegratorBeanInterface {
    private SinkInterface1 sinkInterface1 = IntegratorClientFactory
            .getSinkClient(SinkInterface1.class,&amp;quot;sink12&amp;quot;);
    private BizMessageInterface sinkInterface2 = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;sink1&amp;quot;);

    @Override
    public BizMessage&amp;lt;JSONObject&amp;gt; doBizService(BizMessage&amp;lt;JSONObject&amp;gt; message) throws BizException {
        String result1 = this.sinkInterface1.doService1(&amp;quot;001&amp;quot;);
        this.sinkInterface1.doService2(&amp;quot;002&amp;quot;,3);
        AccountDTO[] accountDTOs = this.sinkInterface1.queryAccounts(AccountDTO.builder().account(&amp;quot;002&amp;quot;).build());
        List&amp;lt;AccountDTO&amp;gt; accountDTOList = this.sinkInterface1.queryAccountList(AccountDTO.builder().account(&amp;quot;002&amp;quot;).build());
        CustomerDTO customerDTO = this.sinkInterface1.queryCustomerDTO(&amp;quot;001&amp;quot;);
        JSONObject jsonObject1 = new JSONObject();
        jsonObject1.set(&amp;quot;accountNo&amp;quot;,&amp;quot;003&amp;quot;);
        BizMessage&amp;lt;JSONObject&amp;gt; bizMessage = this.sinkInterface2.call(jsonObject1);
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;result1&amp;quot;,result1);
        jsonObject.set(&amp;quot;accountDTOs&amp;quot;,accountDTOs);
        jsonObject.set(&amp;quot;accountDTOList&amp;quot;,accountDTOList);
        jsonObject.set(&amp;quot;customerDTO&amp;quot;,customerDTO);
        jsonObject.set(&amp;quot;sink1&amp;quot;,bizMessage.getData());
        return BizMessage.buildSuccessMessage(message,jsonObject);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-bean-service类app服务&#34;&gt;2. bean-service类app服务&lt;/h3&gt;
&lt;p&gt;bean-service类app服务有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app接口虽然都要求为BizMessage&lt;JSONObject&gt;类型，但是对JSONObject有格式要求，消息体中应包括：className（可选）、methodName（可选）、params（必选），params为JSONArray类型；&lt;/li&gt;
&lt;li&gt;可自由开发服务类，但上送JSONObject的className、methodName、params应该和类接口相匹配；&lt;/li&gt;
&lt;li&gt;在service.yml中配置”bean-service“类型的聚合服务，服务类只支持SpringBean来进行挂接；&lt;/li&gt;
&lt;li&gt;bean-service类在开发时，一定要先定义一个Interface类，这个Interface类会被调用方（一般是渠道层source，app服务如作为延迟服务会被应用层调用）所引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bean-service类app服务，如下例所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class SinkClientInterface1Impl implements SinkInterface1 {
    private SinkInterface1 sinkInterface1 =  IntegratorClientFactory.getSinkClient(SinkInterface1.class,&amp;quot;sink12&amp;quot;);;
    int retryNum = 0;

    @Override
    public String doService1(String arg1) {
        return this.sinkInterface1.doService1(arg1);
    }

    @Override
    public void doService2(String arg1, int arg2) {
        this.sinkInterface1.doService2(arg1,arg2);
    }

    @Override
    public CustomerDTO queryCustomerDTO(String customerId) {
        return this.sinkInterface1.queryCustomerDTO(customerId);
    }

    @Override
    public AccountDTO[] queryAccounts(AccountDTO accountDTO) {
        return this.sinkInterface1.queryAccounts(accountDTO);
    }

    @Override
    public List&amp;lt;AccountDTO&amp;gt; queryAccountList(AccountDTO accountDTO) {
        return this.queryAccountList(accountDTO);
    }
	...
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>接口规范</title>
      <link>http://bizsip.bizmda.com/doc/interface/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://bizsip.bizmda.com/doc/interface/</guid>
      <description>&lt;p&gt;介绍Biz-SIP中间件各模块间的接口类型和通讯方式。&lt;/p&gt;
&lt;h2 id=&#34;一biz-sip内部标准消息规范&#34;&gt;一、Biz-SIP内部标准消息规范&lt;/h2&gt;
&lt;p&gt;Biz-SIP中间件的内部消息规范如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;是否必填&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;返回码，0为成功，非0为失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;message&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;返回消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extMessage&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;返回扩展消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;traceId&lt;/td&gt;
&lt;td&gt;char(32)&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;由Biz-SIP统一生成的唯一跟踪ID，每个聚合服务中traceId相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parentTraceId&lt;/td&gt;
&lt;td&gt;char(32)&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;父交易服务的traceId，父交易服务一般调用SAF服务，会产生子交易服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;由Biz-SIP统一生成的时间戳，为聚合服务的最初发起时间，为1970年1月1日零点整至发起时间的毫秒数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;String（JSON格式）&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;传送的数据，一般为JSON格式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;二渠道层open-api接口规范&#34;&gt;二、渠道层Open API接口规范&lt;/h2&gt;
&lt;p&gt;Open API接口网关，是Biz-SIP中间件对外提供的标准接口接入，规范如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;http://{地址}:{端口}/api&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP请求头&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- Content-Type&lt;/td&gt;
&lt;td&gt;application/json&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- Biz-Service-Id&lt;/td&gt;
&lt;td&gt;调用的聚合服务ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;请求包&lt;/td&gt;
&lt;td&gt;JSON报文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;响应包&lt;/td&gt;
&lt;td&gt;Biz-SIP内部标准消息（参见“Biz-SIP内部标准消息规范”）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;三应用层app-integrator接口规范&#34;&gt;三、应用层App Integrator接口规范&lt;/h2&gt;
&lt;p&gt;服务整合器（Integrator）接口，对外是以Spring Cloud微服务的形式提供的，内部调用是采用这种接口规范，同时接入非标接口的客户端适配器也是采用这个接口进行接入的，规范如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;http://sip-integrator/api&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP请求头&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- Content-Type&lt;/td&gt;
&lt;td&gt;application/json&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- Biz-Service-Id&lt;/td&gt;
&lt;td&gt;调用的聚合服务ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;请求包&lt;/td&gt;
&lt;td&gt;JSON报文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;响应包&lt;/td&gt;
&lt;td&gt;Biz-SIP内部标准消息（参见“Biz-SIP内部标准消息规范”）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;四领域层sink接口规范&#34;&gt;四、领域层Sink接口规范&lt;/h2&gt;
&lt;p&gt;Sink接口，是Integrator调用所有Sink模块的接口，规范如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Content-Type&lt;/th&gt;
&lt;th&gt;application/json&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;请求包&lt;/td&gt;
&lt;td&gt;Biz-SIP内部标准消息（参见“Biz-SIP内部标准消息规范”）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;响应包&lt;/td&gt;
&lt;td&gt;Biz-SIP内部标准消息（参见“Biz-SIP内部标准消息规范”）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>运行原理</title>
      <link>http://bizsip.bizmda.com/doc/know-how/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://bizsip.bizmda.com/doc/know-how/</guid>
      <description>&lt;p&gt;介绍Biz-SIP中间件主要场景的运行机制。&lt;/p&gt;
&lt;h2 id=&#34;一系统运行机制概述&#34;&gt;一、系统运行机制概述&lt;/h2&gt;
&lt;h3 id=&#34;1-系统架构&#34;&gt;1 系统架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1632226476949-62d40226-15a1-460b-b1eb-07d125cc0725.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;整个Biz-SIP中间件系统主要包括：应用层服务聚合模块（app integrator）、适配层服务接入模块（source）、领域层服务调用模块（sink）、Open API接口和内部基础服务五大块，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层服务聚合模块（app integrator）：负责服务的整合和编排，对Source模块接入的聚合服务，进行服务编排，并通过Sink模块接入要编排的服务。目前支持Script脚本服务整合和Java SDK服务整合模式。&lt;/li&gt;
&lt;li&gt;适配层服务接入模块（Source）：负责聚合服务的接入，包括通讯协议适配和消息格式转换，并统一接入Integrator。Source模块中的消息格式转换器（Source Converter）支持XML、JSON、定长、有分隔符、8583等报文的解包和打包。&lt;/li&gt;
&lt;li&gt;领域层服务调用模块（Sink）：统一被Integrator所调用，负责接入要编排的服务，包括和外部服务对接时的通讯协议适配和消息格式转换。Sink模块中的Sink通讯连接器（Sink Connector）支持微服务、消息中间件、TCP长短连接等多种接入方式；Sink模块中的消息格式转换器（Sink Converter）支持XML、JSON、定长、有分隔符、8583等报文。&lt;/li&gt;
&lt;li&gt;开放API接口（Open API）：对外提供的标准的API接口，提供所有聚合服务的接入，后面是接入服务聚合器（Integrator）。&lt;/li&gt;
&lt;li&gt;内部基础服务：内置数据库、日志、事务管理等常用的服务，由Integrator编排到聚合服务中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-处理流程&#34;&gt;2 处理流程&lt;/h3&gt;
&lt;p&gt;Biz-SIP中间件的服务接入和处理流程，主要有标准接口接入和非标接口接入二种，其中标准接口接入是采用中间件约定的RESTful接口，不存在接入端的异构通讯适配和异构消息适配，比较简单，而非标接口接入会涉及异构通讯适配和异构消息适配的处理。
&lt;img src=&#34;1620138569876-d30a5472-706b-4cef-81f4-8cf9e09e4d0d.png&#34; alt=&#34;image.png&#34;&gt;
这里以比较复杂的非标接口接入为例，一个简单的调用方应用通过Biz-SIP中间件调用一个被调用方应用后就直接返回的场景，来描述一下整个处理流程：
&lt;img src=&#34;0910bf33323c21a2d5fc2bee0d45ab27.svg&#34; alt=&#34;&#34;&gt;第1步：是适配层Source模块，针对调用方不同异构通讯协议的适配接入，既可以采用现成的通讯接入模块配置接入，也可以代码自行实现。
第2步：Source模块在接入消息后，会调用Source API接口的process()方法。
第3步：process()方法会根据消息转换配置，进行消息解包。通过消息解包，会把调用方应用的消息转换成Biz-SIP中间件采用的JSON消息格式。
第4步：process()方法中，还会根据解包后的消息，通过聚合服务断言规则来定位要调用的聚合服务ID，聚合服务断言规则是对应config/source.yml文件中的service.service-rules配置项。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：第2、3、4步，可以无需调用Source API接口的process()，由开发人员自行编码实现，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第5步：调用应用层App Integrator，开始调用约定的聚合服务，这个接口和标准接口接入的接口是同一个接口。
第6步：服务流程编排，是根据聚合服务配置来进行服务调用的编排，目前支持Script服务聚合器、基于Java开发的服务聚合器；
第7步：根据服务编排，会调用领域层Sink服务。
第9步：消息打包，既可以代码自行实现，也可以配置Sink Converter来实现。通过消息打包，会把Biz-SIP中间件采用标准JSON消息格式，转换成外部被调用方的消息格式。
第10步：调用Sink Connector，既可以采用现成的通讯接入模块配置接入，也可以代码自行实现。
第11步：Sink Connector和被调用方应用通讯调用和交互。
第13步：消息解包，同第9步，既可以编码实现，也可以配置Sink Converter来实现，通过消息解包，会把外部被调用方返回的消息，转成Biz-SIP中间件的标准JSON消息格式。
第16步：Integrator继续执行后续的服务编排脚本。
第18步：消息打包，具体类似第3步消息解包的工作，会把Biz-SIP中间件响应回来的JSON消息格式转换成调用方应用的响应消息。
第20步：通过Source模块，将响应消息返回给调用方应用。&lt;/p&gt;
&lt;h3 id=&#34;3-运行机制图&#34;&gt;3 运行机制图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;1632293645795-2c70ffbc-1d33-4345-a250-5c01e1ad1341.png&#34; alt=&#34;image.png&#34;&gt;
上图中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝色虚框所呈现的部分，主要是Biz-SIP中间件的配置文件。&lt;/li&gt;
&lt;li&gt;蓝底黑字所呈现的部分，表示是需要Java代码开发的，涉及适配层、应用层和领域层。&lt;/li&gt;
&lt;li&gt;蓝色虚箭头线所涉及的接口，就是不同层次之间需要互相依赖的接口定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二应用层app-integrator&#34;&gt;二、应用层App Integrator&lt;/h2&gt;
&lt;h3 id=&#34;1-功能介绍&#34;&gt;1 功能介绍&lt;/h3&gt;
&lt;p&gt;App Integrator服务整合器主要是对聚合服务进行内部服务和外部服务的编排处理，系统架构上支持多种模式的服务整合器，目前支持服务聚合编排模式包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于Script脚本的服务编排：通过编写类JavaScript的脚本文件，来实现领域层服务的聚合和编排；&lt;/li&gt;
&lt;li&gt;基于Java代码开发的服务编排：开发人员通过Java代码的编写，实现领域层服务的编排，支持2种类型的Java服务类：
&lt;ul&gt;
&lt;li&gt;integrator-bean-service接口服务类：integrator-bean-service通过实现统一的接口来实现服务编排。&lt;/li&gt;
&lt;li&gt;bean-service接口服务类：bean-service提供更为灵活的接口定义来实现服务编排。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;领域层服务的直接透传：通过配置sink-service，可以快速把领域层sink服务透传发布到前端的适配层source和OpenAPI接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-调用接口&#34;&gt;2 调用接口&lt;/h3&gt;
&lt;p&gt;App Integrator对外提供标准API接口接入，接口规范如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;http://{地址}:{端口}/api&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP请求头&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- Content-Type&lt;/td&gt;
&lt;td&gt;application/json&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- Biz-Service-Id&lt;/td&gt;
&lt;td&gt;调用的聚合服务ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提交方式&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;请求包&lt;/td&gt;
&lt;td&gt;JSON报文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;响应包&lt;/td&gt;
&lt;td&gt;Biz-SIP内部标准消息（参见“Biz-SIP内部标准消息规范”）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;三source服务接入模块&#34;&gt;三、Source服务接入模块&lt;/h2&gt;
&lt;h3 id=&#34;1-功能介绍-1&#34;&gt;1 功能介绍&lt;/h3&gt;
&lt;p&gt;适配层Source模块主要是对接外部和系统内部其它系统的服务接入。
主要功能主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通讯协议的对接：服务接入模块（Source）负责外部调用方服务的通讯接入；&lt;/li&gt;
&lt;li&gt;消息转换：把外部多种消息格式，转换成平台内部通过的JSONObject消息类型；&lt;/li&gt;
&lt;li&gt;调用应用层的App Integrator进行服务编排。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并根据Source端定义的消息类型，调用消息类型所对应的消息转换器（Source Converter），转换器负责进行消息的格式转换，支持XML、JSON、定长、有分隔符、8583等报文的解包和打包。&lt;/p&gt;
&lt;h3 id=&#34;2-运行流程&#34;&gt;2 运行流程&lt;/h3&gt;
&lt;p&gt;Source模块的运行流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过模块配置或二次开发的通讯接口（可以调用配置好的connector，也可以代码自行实现），接入外部应用发来的消息报文；&lt;/li&gt;
&lt;li&gt;对收到的消息进行解包，解包可以通过调用配置好的conveter，也可以在代码中自行编码实现，其中息格式转换配置是定义在source.yml中，并结合“config/converter”目录下的消息格式配置文件，实现对消息解包的配置化。&lt;/li&gt;
&lt;li&gt;把解包好的消息，打包成JSON消息格式，发给Integrator；&lt;/li&gt;
&lt;li&gt;Integrator处理完成后，会用内部标准消息（BizMessage&lt;JSONObject&gt;）格式返回；&lt;/li&gt;
&lt;li&gt;对收到的消息进行打包，打包可以通过调用配置好的conveter，也可以在代码中自行编码实现。&lt;/li&gt;
&lt;li&gt;通过第1步使用的通讯接口，把最终消息报文返回给外部应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;四sink服务调用模块&#34;&gt;四、Sink服务调用模块&lt;/h2&gt;
&lt;h3 id=&#34;1-功能介绍-2&#34;&gt;1 功能介绍&lt;/h3&gt;
&lt;p&gt;Sink服务主要有二类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一类是对接第三方应用；&lt;/li&gt;
&lt;li&gt;另一类是领域层的交易处理模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sink服务的功能主要是二个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通讯协议的对接：Sink Connect负责和调用系统的通讯对接，支持微服务、消息中间件、TCP长短连接等多种接入方式；&lt;/li&gt;
&lt;li&gt;消息格式的转换：Sink Converter负责调用服务消息的格式转换，支持XML、JSON、定长、有分隔符、8583等报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-运行流程-1&#34;&gt;2 运行流程&lt;/h3&gt;
&lt;p&gt;Sink模块的运行流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收到Integrator发来的消息报文（参照服务端适配器接口规范）；&lt;/li&gt;
&lt;li&gt;对收到的消息进行打包，打包可以通过调用配置好的conveter，也可以在代码中自行编码实现，其中息格式转换配置是定义在source.yml中，并结合“config/converter”目录下的消息格式配置文件，实现对消息打包的配置化。&lt;/li&gt;
&lt;li&gt;根据Sink端约定的通讯协议类型，可以选择基于配置的Sink Connector，也可以代码自行开发通讯接口，和外部应用进行消息报文交互；&lt;/li&gt;
&lt;li&gt;对外部应用返回的消息，进行解包，解包可以通过调用配置好的conveter，也可以在代码中自行编码实现；&lt;/li&gt;
&lt;li&gt;把解包成功的JSONObject平台消息报文，返回给Integrator。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-sink服务类型&#34;&gt;3 Sink服务类型&lt;/h3&gt;
&lt;p&gt;Sink目前支持4种Sink服务类型：netty、rabbitmq、sink-bean、bean。
其中netty和rabbitmq是开箱即用的Sink服务，通过配置接入参数，就能快速实现TCP短连接和RabbitMQ RPC连接。
sink-bean和bean服务类型，是提供Java开发框架，由Java开发人员来自行开发的，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sink-bean是基于报文消息的对接，一般用来对接采用报文通讯的第三方。&lt;/li&gt;
&lt;li&gt;bean是基于接口类的实现，接口比较严格，一般用来对接内部实现的交易处理系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;五延迟服务&#34;&gt;五、延迟服务&lt;/h2&gt;
&lt;p&gt;延迟服务主要用于Saga分布式事务和SAF存储转发的处理，主要场景有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;重试通知：通知对方系统，直到对方给出明确的回复响应。&lt;/li&gt;
&lt;li&gt;向前补偿：调用第三方服务后，超时没有响应，系统会后续发起查询上笔交易状态的查询交易，根据查询交易状态来决定继续完成后续服务步骤还是对以前服务步骤发起补偿（冲正）操作。&lt;/li&gt;
&lt;li&gt;向后补偿：调用第三方服务后，超时没有响应，系统会立即发起针对此交易的补偿交易，补偿成功后，会对以前服务步骤依次发起补偿（冲正）操作；如果补偿失败，会置交易失败，由人工介入处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上这几种事务场景，都是调用延迟服务的方式来实现的，调用方式主要有二种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Script脚本中调用：在脚本中通过“sip.doDelayService()”调用来实现。&lt;/li&gt;
&lt;li&gt;Java调用：通过“IntegratorClientFactor.getDelayBizServiceClient()”获得延迟服务调用句柄，来进行延迟服务的调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以Java调用为例，针对延迟服务的执行流程，如下图所示：
&lt;img src=&#34;1632055925501-c21ca7b1-c200-4a09-b075-a30502e65ab4.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;适配层调用App Integrator后，会执行指定的聚合服务；&lt;/li&gt;
&lt;li&gt;在Java编写的聚合服务中，会首先约定一个聚合服务调用的接口xxxDelayInterface，会声明接口类型、调用延迟间隔时间和调用次数；&lt;/li&gt;
&lt;li&gt;在Java编写的服务中，可以通过前面声明的xxxDelayInterface接口，发起延迟服务的调用；&lt;/li&gt;
&lt;li&gt;发起延迟消息后，在平台内部实现机制上，是通过发送RabbitMQ延迟消息的方式来实现的；&lt;/li&gt;
&lt;li&gt;事务管理器在延迟服务接口约定的延迟时间后，会收到RabbitMQ消息，调起聚合服务（子服务）的处理；&lt;/li&gt;
&lt;li&gt;如果执行成功，则延迟服务顺利完成，父服务和子服务都标记为成功；&lt;/li&gt;
&lt;li&gt;如果在执行中抛出BizTimeOutException异常，则会结束当前延迟服务，等待延迟服务的再次唤起；&lt;/li&gt;
&lt;li&gt;如果在执行中抛出其它BizException异常，则会结束当前延迟服务，标记父服务和子服务为失败，等待人工后续处理；&lt;/li&gt;
&lt;li&gt;延迟服务唤起次数超限，也会会结束当前延迟服务，标记父服务和子服务为失败，等待人工后续处理。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>扩展开发</title>
      <link>http://bizsip.bizmda.com/doc/extend/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://bizsip.bizmda.com/doc/extend/</guid>
      <description>&lt;p&gt;介绍对Biz-SIP中间件模块进行增加类型和扩展功能的进阶开发。&lt;/p&gt;
&lt;h2 id=&#34;一应用层app-integrator&#34;&gt;一、应用层App Integrator&lt;/h2&gt;
&lt;h3 id=&#34;1-script服务整合器脚本函数的扩展&#34;&gt;1 Script服务整合器脚本函数的扩展&lt;/h3&gt;
&lt;p&gt;Script服务整合器是构建在magic-script脚本解析器基础上的服务编排引擎，通过解释执行service目录下的*.script文件，实现内外部服务整合和编排运行。
service目录下所有的“*.script”文件，都是Script服务整合器脚本。脚本语言采用magic-script（&lt;a href=&#34;https://gitee.com/ssssssss-team/magic-script&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gitee.com/ssssssss-team/magic-script&lt;/a&gt;），这是一款基于JVM的脚本语言。
在Script服务整合器脚本中，主要使用的特殊对象包括：sip对象、log对象等。
其中sip对象是对应于com.bizmda.bizsip.integrator.executor.script.SipFunctions类，可以扩展这个类来实现sip对象函数的开发。&lt;/p&gt;
&lt;h3 id=&#34;2-应用层app-integrator扩展开发&#34;&gt;2 应用层App Integrator扩展开发&lt;/h3&gt;
&lt;p&gt;Biz-SIP提供开箱即用的Script聚合服务整合器，不过开发人员可以对聚合服务整合器进行二次开发和扩展，扩展新的聚合服务整合器。
目前Biz-SIP中间件支持的聚合服务，是从config/service目录下文件进行装载的，聚合服务ID（serviceId）是由“目录名+文件名前缀”来表示的，聚合服务类型（type）是由文件名后缀来表示的，具体的聚合服务类型和实现类的关系，在AbstractIntegratorService类中进行关联：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public final static Map&amp;lt;String,Class&amp;gt; SERVICE_SCRIPT_SUFFIX_MAP = new HashMap&amp;lt;String,Class&amp;gt;(){{
        put(&amp;quot;script&amp;quot;, ScriptIntegratorService.class);
    }};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;具体的聚合服务整合器实现类，都是AbstractIntegratorService抽象类的子类，在Biz-SIP中间件加载时，会对每一个在config/service目录下的聚合服务文件，都会根据文件后缀来实例化对应的聚合服务整合器实现类，AbstractIntegratorService抽象类主要有2个主要的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;init()：用于聚合服务整合器实现类的初始化；&lt;/li&gt;
&lt;li&gt;doBizService()：在Biz-SIP通过开放API接口收到聚合服务请求时，具体的聚合服务处理过程，在这个doBizService()方法中实现，Script聚合服务整合器类（ScriptIntegratorService.java）是采用magic-script来驱动的，也可以采用其它方式来实现聚合服务的整合处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聚合服务整合器（Integrator）的处理活动图如下：
&lt;img src=&#34;9b4a1614eaf030a6982d268655d10e31.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;要实现一个新的聚合服务器实现类，主要开发流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承AbstractIntegratorService，实现init()、doBizService()共2个方法；&lt;/li&gt;
&lt;li&gt;将实现的聚合服务器实现类，在AbstractIntegratorService类的SERVICE_SCRIPT_SUFFIX_MAP中添加，key为新的聚合服务配置文件约定的文件后缀名，注意不要和原有的类型冲突，value为具体的聚合服务器实现类。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二source服务接入模块&#34;&gt;二、Source服务接入模块&lt;/h2&gt;
&lt;p&gt;Biz-SIP会提供开箱即用的Source模块，不过对于较为特殊的外部应用服务接入，还是需要开发定制的。
在开发服务接入模块时，需要在项目pom.xml中引入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.bizmda.bizsip&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;source-spring-cloud-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source模块的处理核心是Source类，Source类主要有2个主要的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;init()：用于客户端适配器的初始化，主要是一些相关配置信息加载的工作；&lt;/li&gt;
&lt;li&gt;process()：具体在收到外部应用消息后和返回外部应用之间，所要做的处理工作，主要是解包、调用聚合服务、打包等工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source模块的处理活动图如下：
&lt;img src=&#34;65c341a8373e2014d6326939d522e6ef.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上面的活动图可以看到，二次开发工作主要集中在服务接入模块初始化、通讯接入和读取消息这些部分。&lt;/p&gt;
&lt;h2 id=&#34;三sink服务调用模块&#34;&gt;三、Sink服务调用模块&lt;/h2&gt;
&lt;p&gt;Biz-SIP提供了开箱即用的服务调用模块，二次开发主要在消息处理器和协议处理器的，对于服务接入模块本身，只是简单地加载和调用Sink类即可，无需过多的二次开发操作。
在做服务调用模块的开发时，需要在项目pom.xml中引入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.bizmda.bizsip&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;sink-spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务调用模块的处理核心是Sink类，Sink类主要有2个主要的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;init()：用于Sink端的初始化，主要是一些相关配置信息加载的工作；&lt;/li&gt;
&lt;li&gt;process()：具体在被服务整合器（Integrator）调用后，所要做的处理工作，主要是消息打包、调用外部应用服务、消息解包等工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务调用模块的处理活动图如下：
&lt;img src=&#34;014eadc01388492ffafeac29e1670e67.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从上面的活动图可以看到，服务调用模块的二次开发工作很少，主要是对于Sink类的初始化和调用，对通讯的个性化开发，是放在连接器（Connector）中开发的。&lt;/p&gt;
&lt;h2 id=&#34;四converter转换器消息适配&#34;&gt;四、Converter转换器（消息适配）&lt;/h2&gt;
&lt;p&gt;所有消息处理器的实现类，有一个公共的抽象父类——AbstractConverter类，解包和打包，分别这调用AbstractConverter类的pack()和unpack()方法。
解包（AbstractConverter类的unpack()方法）流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将外部报文进行预解包，这是调用AbstractConverter类的adaptor2json()方法，该方法是根据消息类型配置和相关参数，对外部消息预解成中间的JSON格式的消息，以进行后续进一步处理；&lt;/li&gt;
&lt;li&gt;对预解包进行最终的解包，这是调用AbstractConverter类的json2biz()方法，该方法是用上一步的预解包消息，组织Biz-SIP内部标准JSON消息；在解包时，可能会涉及到格式转换文件的断言规则判断（调用AbstractConverter类的matchMessagePredicateRule()方法），这是根据消息类型来定的。打包（AbstractConverter类的pack()方法）流程如下：&lt;/li&gt;
&lt;li&gt;根据内部标准JSON消息进行预打包，这是调用AbstractConverter类的biz2json()方法；在预打包时，可能会涉及到格式转换文件的断言规则判断（调用AbstractConverter类的matchMessagePredicateRule()方法），这是根据消息类型来定的。&lt;/li&gt;
&lt;li&gt;实现最终的打包，这是调用AbstractConverter类的json2adaptor()方法，这是根据适配器所设置的参数来定的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前Biz-SIP中间件支持simple-json、simple-xml、velocity-json等消息格式，具体的实现类在AbstractConverter类中进行关联：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	public static final Map&amp;lt;String,Object&amp;gt; CONVERTER_TYPE_MAP = new HashMap&amp;lt;&amp;gt;();
    static {
        CONVERTER_TYPE_MAP.put(&amp;quot;simple-json&amp;quot;, SimpleJsonConverter.class);
        CONVERTER_TYPE_MAP.put(&amp;quot;simple-xml&amp;quot;, SimpleXmlConverter.class);
        CONVERTER_TYPE_MAP.put(&amp;quot;velocity-json&amp;quot;, VelocityJsonConverter.class);
        CONVERTER_TYPE_MAP.put(&amp;quot;velocity-xml&amp;quot;, VelocityXmlConverter.class);
        CONVERTER_TYPE_MAP.put(&amp;quot;fixed-length&amp;quot;, FixedLengthConverter.class);
        CONVERTER_TYPE_MAP.put(&amp;quot;velocity-split&amp;quot;, VelocitySplitConverter.class);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要实现新的消息处理器，主要开发流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承AbstractConverter，实现biz2json()、json2adaptor()、adaptor2json()、json2biz()这4个方法；&lt;/li&gt;
&lt;li&gt;将实现的消息处理类，在AbstractConverter类的CONVERTER_TYPE_MAP中添加。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;五域处理函数&#34;&gt;五、域处理函数&lt;/h2&gt;
&lt;p&gt;域处理函数用在消息格式转换处理中，包括预解包、解包和打包，一般会对域中的值进行一定的处理。
目前支持的域处理函数如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;域处理函数名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fill&lt;/td&gt;
&lt;td&gt;填充&lt;/td&gt;
&lt;td&gt;参数1（必选）：填充方式，left/right分别代表左填充和右填充&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;参数2（必选）：填充字符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;参数3（可选）：填充长度，缺省为当前域长度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trim&lt;/td&gt;
&lt;td&gt;去除空格&lt;/td&gt;
&lt;td&gt;参数1（可选）：left/right分别代表去左边空格和去右边空格，缺省为左右空格都去掉。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;decimalFormat&lt;/td&gt;
&lt;td&gt;对数字进行格式化&lt;/td&gt;
&lt;td&gt;参数1（必选）：根据Java中的DecimalFormat类格式，对数字进行格式化&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所有的域处理函数，都在com.bizmda.bizsip.message.fieldfunction.FieldFunctionImpl类中实现，每个域处理函数都是FieldFunctionImpl类中的一个静态方法，函数名即静态方法名。
静态方法的原型为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static String xxxxxx(Object fieldValue, int fieldLen, List&amp;lt;String&amp;gt; args) {
	......
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中，xxxxxx即为要实现的域处理函数的函数名，输入参数包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fieldValue：要处理域的域值。&lt;/li&gt;
&lt;li&gt;fieldLen：要处理域的域定义长度，一般是在格式转换配置文件中约定的。&lt;/li&gt;
&lt;li&gt;args：多个输入参数，每个域处理函数自行约定，是在格式转换配置文件中会定义域处理函数的输入参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;六connector连接器通讯适配&#34;&gt;六、Connector连接器（通讯适配）&lt;/h2&gt;
&lt;p&gt;连接器（Connector）是支持通讯协议接入的，协议处理器主要是为Sink模块服务的，被Sink模块类所调用，Source模块不支持协议处理器。
所有协议处理器的实现类，有一个公共的抽象父类——AbstractSinkConnector类，主要涉及方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;init()：进行协议处理器的初始化装载，参数会传入服务适配器的配置参数；&lt;/li&gt;
&lt;li&gt;process()：具体和外部应用交互的处理过程，传入参数和返回参数都为Object类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Biz-SIP中间件只支持java、Netty、RabbitMQ等通讯连接类型，具体的实现类在AbstractSinkConnector类中进行关联：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public static final Map&amp;lt;String,Object&amp;gt; CONNECTOR_TYPE_MAP = new HashMap&amp;lt;&amp;gt;();
    static {
        CONNECTOR_TYPE_MAP.put(&amp;quot;java&amp;quot;, JavaSinkConnector.class);
        CONNECTOR_TYPE_MAP.put(&amp;quot;springbean&amp;quot;, SpringBeanSinkConnector.class);
        CONNECTOR_TYPE_MAP.put(&amp;quot;netty&amp;quot;, NettySinkConnector.class);
        CONNECTOR_TYPE_MAP.put(&amp;quot;rabbitmq&amp;quot;, RabbitmqSinkConnector.class);
        CONNECTOR_TYPE_MAP.put(&amp;quot;javaapi&amp;quot;, JavaApiSinkConnector.class);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要实现新的协议处理器，主要开发流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承AbstractServerProtocolProcessor类，实现init()、process()这2个方法；&lt;/li&gt;
&lt;li&gt;将实现的消息处理类，在AbstractServerProtocolProcessor类的PROTOCOL_TYPE_MAP中添加。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>xbank示例项目</title>
      <link>http://bizsip.bizmda.com/doc/xbank/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://bizsip.bizmda.com/doc/xbank/</guid>
      <description>&lt;p&gt;通过xbank项目来介绍用Biz-SIP中间件开发一个系统的全流程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;xbank项目版本库：&lt;/strong&gt;&lt;a href=&#34;https://gitee.com/szhengye/xbank.git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;https://gitee.com/szhengye/xbank.git&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;一biz-sip架构和ddd领域驱动设计入门介绍&#34;&gt;一、Biz-SIP架构和DDD领域驱动设计入门介绍&lt;/h2&gt;
&lt;h3 id=&#34;1-ddd领域驱动设计&#34;&gt;1. DDD领域驱动设计&lt;/h3&gt;
&lt;p&gt;2004年，Eric Evans完成了《Domain-Driven Design Tackling Complexity in the Heart of Software》一书，提出了一套针对业务领域建模的方法论和思想&amp;ndash;领域驱动设计，简称DDD。
领域驱动设计（DDD）是一种基于模型驱动的软件设计方式。它以领域为核心，分析领域中的问题，通过建立一个领域模型来有效地解决领域中的核心、复杂问题。
领域驱动设计提出了一套核心构造块（Building Blocks），如聚合、实体、值对象、领域服务、领域工厂、仓储、领域事件等。这些构造块是对面向对象领域建模的一些核心最佳实践的浓缩。这些构造块可以使得我们的设计更加标准、有序。
利用 DDD 提倡的分层、六边形等架构，分离了业务复杂度和技术复杂度，使得系统具备更强的扩展性和弹性；战术层面提供了元模型（聚合，实体，值对象，服务，工厂，仓储等等）帮助构建清晰、稳定，能快速响应变化和新需求能力的应用。&lt;/p&gt;
&lt;h3 id=&#34;2-cola架构&#34;&gt;2. COLA架构&lt;/h3&gt;
&lt;p&gt;COLA 4.0 推荐的应用架构如下图所示：
&lt;img src=&#34;1630415427800-07efac34-8cd6-4df1-82d2-d19af10c513c.png&#34; alt=&#34;image.png&#34;&gt;
1）适配层（Adapter Layer）：负责对前端展示（web，wireless，wap）的路由和适配，对于传统B/S系统而言，adapter就相当于MVC中的controller；
2）应用层（Application Layer）：主要负责获取输入，组装上下文，参数校验，调用领域层做业务处理，如果需要的话，发送消息通知等。层次是开放的，应用层也可以绕过领域层，直接访问基础实施层；
3）领域层（Domain Layer）：主要是封装了核心业务逻辑，并通过领域服务（Domain Service）和领域对象（Domain Entity）的方法对App层提供业务实体和业务逻辑计算。领域是应用的核心，不依赖任何其他层次；
4）基础设施层（Infrastructure Layer)：主要负责技术细节问题的处理，比如数据库的CRUD、搜索引擎、文件系统、分布式服务的RPC等。此外，领域防腐的重任也落在这里，外部依赖需要通过gateway的转义处理，才能被上面的App层和Domain层使用。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二体验biz-sip示例项目xbank&#34;&gt;二、体验Biz-SIP示例项目xbank&lt;/h2&gt;
&lt;h3 id=&#34;1-示例项目xbank简介&#34;&gt;1. 示例项目xbank简介&lt;/h3&gt;
&lt;p&gt;xbank是一家商业银行，面向个人客户和公司客户，其中个人客户业务包括存款、贷款、缴费等业务；银行业务渠道除了传统柜面以外，还有网上银行、手机银行、ATM、POS等，最近准备上一个针对银行合作伙伴的基于OPENAPI网关的开放平台渠道。
本示例项目是以个人客户中的存款查询和缴费业务为例子，渠道采用OPENAPI开放接口，后台系统对接个人客户存款系统和个人客户信息系统，第三方对接缴费平台，来演示如何打造基于Biz-SIP中间件的银行业务中台。
&lt;img src=&#34;1630736586701-bb5dd0f9-f227-46c9-811f-8aa91d2e5ec4.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;按DDD分层架构，应用架构图如下所示：
&lt;img src=&#34;1631769310897-aa802b0c-0946-4bae-802c-525ff8d5d667.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-xbank示例项目模板介绍&#34;&gt;3. xbank示例项目模板介绍&lt;/h3&gt;
&lt;p&gt;打开示例项目，如下图：
&lt;img src=&#34;1631770657971-e46b2907-ad55-40cf-a17c-4fc559de6440.png&#34; alt=&#34;image.png&#34;&gt;
xbank项目分为以下模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xbank-source：适配层模块，存放外部适配接入的适配层实现。
&lt;ul&gt;
&lt;li&gt;xbank-openapi-source：OPENAPI接入的适配层子模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xbank-app：应用层模块，存放应用层的服务实现。&lt;/li&gt;
&lt;li&gt;xbank-sink：领域层模块，存放按领域划分的领域服务实现。
&lt;ul&gt;
&lt;li&gt;xbank-account-sink：账户域子模块&lt;/li&gt;
&lt;li&gt;xbank-customer-sink：客户域子模块&lt;/li&gt;
&lt;li&gt;xbank-payment1-sink：缴费域子模块（存储转发）&lt;/li&gt;
&lt;li&gt;xbank-payment1-sink：缴费域子模块（交易补偿）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xbank-infrastructure：基础设施层模块，存放对数据库、内容存储、HSM等基础设施的访问能力实现。
&lt;ul&gt;
&lt;li&gt;xbank-account-db：账户数据库访问子模块&lt;/li&gt;
&lt;li&gt;xbank-customre-db：客户数据库访问子模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xbank-client：接口模块，存放各层之间的服务接口，以及相关数据DTO。
&lt;ul&gt;
&lt;li&gt;xbank-account-sink-client：账户域服务接口子模块&lt;/li&gt;
&lt;li&gt;xbank-customer-sink-client：客户域服务接口子模块&lt;/li&gt;
&lt;li&gt;xbank-app-client：应用服务接口子模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-创建数据库&#34;&gt;4. 创建数据库&lt;/h3&gt;
&lt;p&gt;执行项目中xbank-infrastructure/xbank-sql/xbank.sql脚本，以建立xbank演示库。&lt;/p&gt;
&lt;h3 id=&#34;5-启动xbank项目&#34;&gt;5. 启动xbank项目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动应用层服务整合器
&lt;ul&gt;
&lt;li&gt;执行xbank-app模块中的XbankAppApplication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启动领域层领域服务
&lt;ul&gt;
&lt;li&gt;执行xbank-customer-sink子模块中的CustomerSinkApplication&lt;/li&gt;
&lt;li&gt;执行xbank-account-sink子模块中的AccountSinkAppliction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启动适配层OPENAPI接入服务
&lt;ul&gt;
&lt;li&gt;执行xbank-openapi-source子模块中的OpenapiSourceApplication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-测试接口&#34;&gt;4. 测试接口&lt;/h3&gt;
&lt;h4 id=&#34;41-查询客户信息&#34;&gt;4.1 查询客户信息&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:sink/customer&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getCustomer&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq              
{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;2d3ed69623f8480a9d95bcd3ca03a4d3&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630677591308,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;age&amp;quot;: 30
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;42-查询账户列表&#34;&gt;4.2 查询账户列表&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:sink/account&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getAccountListByCustomerId&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;748b76566a5e436e9c2990cf9776789f&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630677747532,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: [
      {
        &amp;quot;accountId&amp;quot;: &amp;quot;0001&amp;quot;,
        &amp;quot;balance&amp;quot;: 100,
        &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
      },
      {
        &amp;quot;accountId&amp;quot;: &amp;quot;0002&amp;quot;,
        &amp;quot;balance&amp;quot;: 200,
        &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
      }
    ]
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;43-查询客户信息和账户列表&#34;&gt;4.3 查询客户信息和账户列表&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getCustomerAndAccountList&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;4fa2f86c23ce4b24abb1b0d23833c14f&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630677780246,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;accountList&amp;quot;: [
        {
          &amp;quot;accountId&amp;quot;: &amp;quot;0001&amp;quot;,
          &amp;quot;balance&amp;quot;: 100,
          &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
        },
        {
          &amp;quot;accountId&amp;quot;: &amp;quot;0002&amp;quot;,
          &amp;quot;balance&amp;quot;: 200,
          &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
        }
      ],
      &amp;quot;customer&amp;quot;: {
        &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
        &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
        &amp;quot;age&amp;quot;: 30
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;h2 id=&#34;三项目实践客户域服务的开发&#34;&gt;三、项目实践：客户域服务的开发&lt;/h2&gt;
&lt;h3 id=&#34;1-创建数据库&#34;&gt;1. 创建数据库&lt;/h3&gt;
&lt;p&gt;执行项目中xbank-infrastructure/xbank-sql/xbank.sql脚本，以建立xbank演示库。&lt;/p&gt;
&lt;h3 id=&#34;2-自动生成数据访问层代码&#34;&gt;2. 自动生成数据访问层代码&lt;/h3&gt;
&lt;p&gt;数据库创建后，用MybatisX插件自动生成数据访问层代码：
&lt;img src=&#34;1630738820784-7473f0a7-7ac5-4738-8a3e-68b5e128366d.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-customer领域服务接口和实现类的开发&#34;&gt;3. Customer领域服务接口和实现类的开发&lt;/h3&gt;
&lt;p&gt;先在xbank-customer-domain-client子模块中约定customer领域服务接口，这个接口是共享给领域层和应用层的：
&lt;img src=&#34;1631770763773-37715fd7-dd91-4faf-aab8-08fc5b98bd1d.png&#34; alt=&#34;image.png&#34;&gt;
然后在xbank-customer-sink子模块中完成以下工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于此接口完成CustomerSinkService类的编写；&lt;/li&gt;
&lt;li&gt;完成CustomerSinkApplication启动类的编写；&lt;/li&gt;
&lt;li&gt;配置application.yml相关文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;1631769805722-f5fcc556-00c8-421c-85f3-ed62706f3870.png&#34; alt=&#34;image.png&#34;&gt;
以上就完成了客户领域服务微服务的开发，接下来需要把这个客户领域服务微服务，通过sink接入Biz-SIP平台，配置xbank-app/config/sink.yml，就把CustomerSinkService类挂接到了sink（customer-sink)上：
&lt;img src=&#34;1631769899833-9983d1d9-936c-44b7-86d8-f98a9ee9e96d.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-customer领域服务的快速发布&#34;&gt;4. Customer领域服务的快速发布&lt;/h3&gt;
&lt;p&gt;Customer领域服务接入Biz-SIP平台后，能实现在Biz-SIP开放平台接口的快速发布，这需要在xbank-app/config/service.yml中配置一个类型为“sink-service”的聚合服务：
&lt;img src=&#34;1631770202721-005d08b1-92a5-4855-873b-e5ecd96c0802.png&#34; alt=&#34;image.png&#34;&gt;
注：这类“sink-service”的聚合服务，命名规范为“sink/xxx”，xxx为sink名称。
启动Biz-SIP平台和Customer领域服务，就可以直接在Biz-SIP开放平台接口进行访问：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:sink/customer&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getCustomer&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;e763a42f9a2a49518c2bc6c157d08bab&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630740781540,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;age&amp;quot;: 30
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上传的数据体中，“methodName”为方法名，“params”为输入参数。&lt;/p&gt;
&lt;h3 id=&#34;5-customer领域服务在应用层和适配层的定制&#34;&gt;5. Customer领域服务在应用层和适配层的定制&lt;/h3&gt;
&lt;p&gt;通过在service.yml中配置sink-service聚合服务，能实现已经挂接到Sink的领域服务的快速发布；但是，客户针对应用层和适配层，还是有个性化定制要求，这就涉及到应用层和适配层的定制。
同样以已经挂接到customer-sink上的Customer领域服务为例，先在xbank-app-client子模块中约定应用层接口，这个接口是共享给应用层和适配层的：
&lt;img src=&#34;1631784835222-e08c9e4d-4a53-4af3-b2a0-76ab3a1ec1ca.png&#34; alt=&#34;image.png&#34;&gt;
然后在xbank-app模块中基于此接口完成PersonalAppService类的编写：
&lt;img src=&#34;1631770955734-46595cd1-5d39-4a62-9549-f69f3fbc6fa3.png&#34; alt=&#34;image.png&#34;&gt;
在xbank-app/config/service.yml中配置一个类型为“bean-service”的聚合服务，并类名指定为上面实现的PersonalAppService应用层服务类：
&lt;img src=&#34;1631771374770-e4f66443-70d6-419e-958c-86009f30f6ff.png&#34; alt=&#34;image.png&#34;&gt;
最后在适配层中，定制一个controller来对外发布服务：
&lt;img src=&#34;1631771757331-ffa6ca09-dffa-4faa-92e5-7e2d31d395af.png&#34; alt=&#34;image.png&#34;&gt;
开发者可以在适配层的controller类中通过personalAppInterface，直接调用应用层的PersonalAppService服务：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost:9001/personal/getCustomer\?customerId=001|jq

{
  &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
  &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
  &amp;quot;age&amp;quot;: 30,
  &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四项目实践账户域服务的开发&#34;&gt;四、项目实践：账户域服务的开发&lt;/h2&gt;
&lt;h3 id=&#34;1-account领域服务的封装&#34;&gt;1. Account领域服务的封装&lt;/h3&gt;
&lt;p&gt;Account领域服务是和Customer领域服务并列的，Account领域服务的封装，依次有以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1步：领域服务接口的约定：在xbank-account-sink-client中编写AccountSinkInterface接口；&lt;/li&gt;
&lt;li&gt;第2步：领域服务的实现：创建xbank-account-sink子模块，基于第1步约定的接口，实现AccountSinkService SpringBean，并封装成能独立运行的微服务应用；&lt;/li&gt;
&lt;li&gt;第3步：配置sink.yml文件，把AccountSinkService SpringBean作为Sink连接到Biz-SIP平台；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，Account领域服务在封装时，涉及到多个接口调用，对每个接口采用命令执行器（Command Executor），所有的接口实现继承AbstractBeanCmdExe类来实现：
&lt;img src=&#34;1631772314042-262db11c-3554-47c5-b1da-2bfed319f37d.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-account服务在适配层和应用层的开发和对外暴露&#34;&gt;2. Account服务在适配层和应用层的开发和对外暴露&lt;/h3&gt;
&lt;p&gt;把sink服务，暴露给适配层接口调用，有2种方案：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;方案一：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过sink-service类型，打通适配层和应用层：直接把account领域服务所对应的sink，直接暴露给Biz-SIP开放平台接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4步：配置service.yml文件，把account-sink直接作为sink-service暴露给Biz-SIP开放平台接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接口测试如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:sink/account&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getAccountListByCustomerId&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;2280472dd72c4ee4a2b7214604e9cf27&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630751382623,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: [
      {
        &amp;quot;accountId&amp;quot;: &amp;quot;0001&amp;quot;,
        &amp;quot;balance&amp;quot;: 100,
        &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
      },
      {
        &amp;quot;accountId&amp;quot;: &amp;quot;0002&amp;quot;,
        &amp;quot;balance&amp;quot;: 200,
        &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
      }
    ]
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;方案二：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过bean-service，打通适配层和应用层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4步：应用服务接口的约定：在xbank-personal-app-client中编写PersonalAppInterface接口和CustomerAndAccountList DTO类；&lt;/li&gt;
&lt;li&gt;第5步：应用服务的实现：在xbank-app模块中，基于第4步约定的接口实现PersonalAppService服务；&lt;/li&gt;
&lt;li&gt;第6步：配置service.yml文件，把第5步开发PersonalAppService服务，通过bean-service的account-sink暴露给适配层；&lt;/li&gt;
&lt;li&gt;第7步：在适配层创建xbank-openapi-source子模块，开发PersonalController类，暴露个性化的REST接口，并通过SourceClientFactory.getBizServiceClient(PersonalAppInterface.class,&amp;ldquo;app/personal&amp;rdquo;)获取应用层服务的调用接口（具体请参见&lt;a href=&#34;#lazZY&#34;&gt;链接&lt;/a&gt;），在适配层中调用应用层约定接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接口测试如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost:9001/personal/getAccountListByCustomerId\?customerId=001|jq

[
  {
    &amp;quot;accountId&amp;quot;: &amp;quot;0001&amp;quot;,
    &amp;quot;balance&amp;quot;: 100,
    &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
  },
  {
    &amp;quot;accountId&amp;quot;: &amp;quot;0002&amp;quot;,
    &amp;quot;balance&amp;quot;: 200,
    &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
  }
]

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;五项目实践客户域和账户域服务在应用层的编排&#34;&gt;五、项目实践：客户域和账户域服务在应用层的编排&lt;/h2&gt;
&lt;p&gt;上面已经分别实现了客户域和账户域服务的开发和部署，在应用层中，能方便地对域服务进行服务编排。
在xbank-app模块中，我们可以在PersonalAppService类中，方便地进行服务编排，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class PersonalAppService implements PersonalAppInterface {
    private AccountSinkInterface accountSinkInterface = IntegratorClientFactory
            .getSinkClient(AccountSinkInterface.class,&amp;quot;account-sink&amp;quot;);
    private CustomerSinkInterface customerSinkInterface = IntegratorClientFactory
            .getSinkClient(CustomerSinkInterface.class,&amp;quot;customer-sink&amp;quot;);
    private BizMessageInterface payment1SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment1-sink&amp;quot;);
    private BizMessageInterface payment2SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment2-sink&amp;quot;);
    private PersonalAppInterface personalAppDelayInterface = IntegratorClientFactory
            .getDelayBizServiceClient(PersonalAppInterface.class,&amp;quot;app/personal&amp;quot;,
                    0,1000,2000,4000,8000,16000,32000);

    @Override
    public CustomerAndAccountList getCustomerAndAccountList(String customerId) {
        Customer customer = this.customerSinkInterface.getCustomer(customerId);
        List&amp;lt;Account&amp;gt; accountList = this.accountSinkInterface.getAccountListByCustomerId(customerId);
        CustomerAndAccountList customerAndAccountList = new CustomerAndAccountList();
        customerAndAccountList.setCustomer(customer);
        customerAndAccountList.setAccountList(accountList);
        return customerAndAccountList;
    }
...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在getCustomerAndAccountList()方法中，我们可以同时调用客户域的接口customerSinkInterface，也可以调用账户域的接口accountSinkInterface，从而实现多个域服务的混合编排。
这个聚合服务通过bean-service进行部署：
&lt;img src=&#34;1631777560691-21eeb1ae-c10f-4491-b80d-3a48132b2653.png&#34; alt=&#34;image.png&#34;&gt;
，分别支持Biz-SIP开放平台接口访问和个性化的PersonController实现的REST接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过Biz-SIP开放平台接口测试：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getCustomerAndAccountList&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;c3cda0e1b95f449e986dc5ee41e48716&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1630760469452,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;accountList&amp;quot;: [
        {
          &amp;quot;accountId&amp;quot;: &amp;quot;0001&amp;quot;,
          &amp;quot;balance&amp;quot;: 100,
          &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
        },
        {
          &amp;quot;accountId&amp;quot;: &amp;quot;0002&amp;quot;,
          &amp;quot;balance&amp;quot;: 200,
          &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;
        }
      ],
      &amp;quot;customer&amp;quot;: {
        &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
        &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
        &amp;quot;age&amp;quot;: 30
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;通过个性化PersonController实现的REST接口，接口测试如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;$ curl http://localhost:9001/personal/getCustomerAndAccountList\?customerId=001|jq

{
  &amp;quot;customer&amp;quot;: {
    &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
    &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
    &amp;quot;age&amp;quot;: 30,
    &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;
  },
  &amp;quot;accountList&amp;quot;: [
    {
      &amp;quot;accountId&amp;quot;: &amp;quot;0001&amp;quot;,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;balance&amp;quot;: 100
    },
    {
      &amp;quot;accountId&amp;quot;: &amp;quot;0002&amp;quot;,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;balance&amp;quot;: 200
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;六项目实践支付域服务的开发&#34;&gt;六、项目实践：支付域服务的开发&lt;/h2&gt;
&lt;h3 id=&#34;1-payment领域服务的封装&#34;&gt;1. Payment领域服务的封装&lt;/h3&gt;
&lt;p&gt;payment领域服务是对接第三方缴费平台的，第三方缴费平台的接口是XML报文格式。
payment领域服务是属于对接第三方的领域服务，前面提到的customer领域服务和account领域服务，主要是内部交易处理的领域服务。
这二类领域服务在开发时有比较大的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对接第三方的领域服务，一般涉及到复杂的通讯接口对接和报文格式转换；&lt;/li&gt;
&lt;li&gt;内部交易处理领域服务，应用层和领域层之间，建议采用约定的Interface接口类的调用约定（底层Biz-SIP平台自动转换成RESTful协议和BizMessage标准消息进行交互）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开发对接第三方的领域服务时，建议采用实现SinkBeanInterface接口的JavaBean或SpringBean：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface SinkBeanInterface {
    /**
     * Java服务调用接口
     * @param beforeJsonObject 打包前的JsonObject
     * @param packMessage 传入的消息
     * @return 返回值
     * @throws BizException
     */
    public byte[] process(JSONObject beforeJsonObject, byte[] packMessage) throws BizException;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在process()方法中传入的beforeJsonObject参数，是传入sink但还没经过打包的JSONObject对象，packMessage参数已经根据sink的消息格式配置，完成了对于目标消息格式的转换。
​&lt;/p&gt;
&lt;p&gt;Payment领域服务的封装，依次有以下步骤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第1步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;领域服务的实现：创建xbank-payment1-sink子模块，根据SinkBeanInterface接口，实现Payment1SinkService微服务，并封装成能独立运行的微服务应用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class Payment1SinkService implements SinkBeanInterface {
    @Override
    public byte[] process(JSONObject beforeJsonObject, byte[] inMessage) throws BizException {
        log.info(&amp;quot;传入消息:\n{}&amp;quot;, BizUtils.buildHexLog(inMessage));
        return inMessage;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;第2步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在sink.yml文件中，把Payment1SinkService微服务作为Sink连接到Biz-SIP平台：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- id: payment1-sink
  type: rest
  url: http://payment1-sink/sink
  converter:
    type: simple-xml
  connector:
    type: sink-bean
    class-name: com.xbank.sink.payment.service.Payment1SinkService
    spring-bean: true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-payment服务的快速发布&#34;&gt;2. Payment服务的快速发布&lt;/h3&gt;
&lt;p&gt;配置service.yml文件，把payment-sink直接作为sink-service暴露给Biz-SIP开放平台接口：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- bizServiceId: sink/payment1
  type: sink-service
  sinkId: payment1-sink
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口测试如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:sink/payment1&amp;quot; -X POST --data &#39;{&amp;quot;message&amp;quot;:&amp;quot;Hello world!&amp;quot;}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;af37bbbb495744d79f2f1811178436f5&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631153112943,
  &amp;quot;data&amp;quot;: {
    &amp;quot;message&amp;quot;: &amp;quot;Hello world!&amp;quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Payment1SinkApplication会打印出日志，收到了完成消息转换后的XML报文：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2021-09-09 10:05:13.265  INFO 10756 --- [nio-8003-exec-1] c.x.d.p.service.Payment1DomainService    : 传入消息:
====+ 01-02-03-04-05-06-07-08-09-10-11-12-13-14-15-16-17-18-19-20 + ====== ASCII  ====== +
0000: 3C 3F 78 6D 6C 20 76 65 72 73 69 6F 6E 3D 22 31 2E 30 22 20 | &amp;lt;?xml version=&amp;quot;1.0&amp;quot;  |
0020: 65 6E 63 6F 64 69 6E 67 3D 22 55 54 46 2D 38 22 20 73 74 61 | encoding=&amp;quot;UTF-8&amp;quot; sta |
0040: 6E 64 61 6C 6F 6E 65 3D 22 6E 6F 22 3F 3E 3C 72 6F 6F 74 3E | ndalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;root&amp;gt; |
0060: 3C 6D 65 73 73 61 67 65 3E 48 65 6C 6C 6F 20 77 6F 72 6C 64 | &amp;lt;message&amp;gt;Hello world |
0080: 21 3C 2F 6D 65 73 73 61 67 65 3E 3C 2F 72 6F 6F 74 3E       | !&amp;lt;/message&amp;gt;&amp;lt;/root&amp;gt;.. |
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-payment领域服务在应用层和适配层的定制&#34;&gt;3. payment领域服务在应用层和适配层的定制&lt;/h3&gt;
&lt;p&gt;通过在service.yml中配置sink-service聚合服务，能实现已经挂接到Sink的领域服务的快速发布。
但是，客户针对应用层和适配层，还是有个性化定制要求，这就涉及到应用层和适配层的定制。
例如我们要实现一个把消息发送给缴费平台的业务，输入的消息包括：交易码、传递的消息。
首先，需要在xbank-personal-app-client子模块中的PersonalAppInterface接口，增加一个消息发送接口send2payment1()，这个接口是共享给应用层和适配层的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface PersonalAppInterface {
    ...
    public BizMessage send2Payment1(Object message) throws BizException;
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在xbank-app模块中基于此接口方法。在PersonalAppService类实现接口：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PersonalAppService implements PersonalAppInterface {
	...
    private BizMessageInterface payment1DomainInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment1-sink&amp;quot;);
	...
    @Override
    public BizMessage&amp;lt;JSONObject&amp;gt; send2Payment1(Object message) throws BizException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;message&amp;quot;,message);
        return this.payment1DomainInterface.call(jsonObject);
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于payment领域服务没有另外约定接口，是采用BizMessage标准消息接口，所以是采用BizMessageInterface接口来构建sink调用接口的，并统一通过call()方法来调用领域服务。
由于前面已经在service.yml中把PersonalAppService应用层服务类，配置成了“bean-service”的聚合服务，所以可以直接进行接口调用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;send2Payment1&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;Hello world!&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;19620fe5843d4d53a2bf1f599b516006&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631153624870,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;traceId&amp;quot;: &amp;quot;19620fe5843d4d53a2bf1f599b516006&amp;quot;,
      &amp;quot;code&amp;quot;: 0,
      &amp;quot;data&amp;quot;: {
        &amp;quot;message&amp;quot;: &amp;quot;Hello world!&amp;quot;
      },
      &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
      &amp;quot;timestamp&amp;quot;: 1631153624870
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Payment1SinkApplication应用会收到消息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2021-09-09 10:13:44.911  INFO 10756 --- [nio-8003-exec-2] c.x.d.p.service.Payment1DomainService    : 传入消息:
====+ 01-02-03-04-05-06-07-08-09-10-11-12-13-14-15-16-17-18-19-20 + ====== ASCII  ====== +
0000: 3C 3F 78 6D 6C 20 76 65 72 73 69 6F 6E 3D 22 31 2E 30 22 20 | &amp;lt;?xml version=&amp;quot;1.0&amp;quot;  |
0020: 65 6E 63 6F 64 69 6E 67 3D 22 55 54 46 2D 38 22 20 73 74 61 | encoding=&amp;quot;UTF-8&amp;quot; sta |
0040: 6E 64 61 6C 6F 6E 65 3D 22 6E 6F 22 3F 3E 3C 72 6F 6F 74 3E | ndalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;lt;root&amp;gt; |
0060: 3C 6D 65 73 73 61 67 65 3E 48 65 6C 6C 6F 20 77 6F 72 6C 64 | &amp;lt;message&amp;gt;Hello world |
0080: 21 3C 2F 6D 65 73 73 61 67 65 3E 3C 2F 72 6F 6F 74 3E       | !&amp;lt;/message&amp;gt;&amp;lt;/root&amp;gt;.. |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在适配层中，在原有的PersonalController类中，增加对“/send2Payment1&amp;quot;请求的实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @GetMapping(value =&amp;quot;/send2Payment1&amp;quot;)
    public BizMessage&amp;lt;JSONObject&amp;gt; send2Payment1(String message) throws BizException {
        return this.personalAppInterface.send2Payment1(message);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;开发者可以在适配层的PersonalController类中，通过personalAppInterface，把消息发送给缴费平台：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost:9001/personal/send2Payment1\?message=hello|jq 

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;3c9d800b3c76480c9ae605d543709ea3&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631154087879,
  &amp;quot;data&amp;quot;: {
    &amp;quot;message&amp;quot;: &amp;quot;hello&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在适配层中，还可以通过配置sink-service类型的聚合服务，直接调用领域层的Sink服务。例如可以在原有的PersonalController类中，直接向应用层发起JSONObject类型的平台报文：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RestController
@RequestMapping(&amp;quot;/personal&amp;quot;)
public class PersonalController  {
	...
    private BizMessageInterface payment1SinkInterface = SourceClientFactory
            .getBizServiceClient(BizMessageInterface.class,&amp;quot;sink/payment1&amp;quot;);
	...
	@GetMapping(value =&amp;quot;/send2Payment&amp;quot;)
    public BizMessage&amp;lt;JSONObject&amp;gt; send2Payment(String message) throws BizException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;message&amp;quot;,message);
        return this.payment1SinkInterface.call(jsonObject);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;开发者可以在适配层的PersonalController类中，通过personalAppInterface，把消息发送给缴费平台：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost:9001/personal/send2Payment1\?message=hello|jq 

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;3c9d800b3c76480c9ae605d543709ea3&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631154087879,
  &amp;quot;data&amp;quot;: {
    &amp;quot;message&amp;quot;: &amp;quot;hello&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;七项目实践应用服务对延迟服务的组装&#34;&gt;七、项目实践：应用服务对延迟服务的组装&lt;/h2&gt;
&lt;h3 id=&#34;1-saf存储转发的实现&#34;&gt;1. SAF存储转发的实现&lt;/h3&gt;
&lt;p&gt;在领域层中，开发Payment2SinkService，根据tranMode交易模式，实现处理超时、处理失败和处理成功的各种异常情况：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class Payment2SinkService implements JSONObjectSinkBeanInterface {
    @Autowired
    private TimeoutCmdExe timeoutCmdExe;
    @Autowired
    private TimeoutAndFailCmdExe timeoutAndFailCmdExe;
    @Autowired
    private TimeoutAndSuccessCmdExe timeoutAndSuccessCmdExe;
    @Autowired
    private SuccessCmdExe successCmdExe;

    @Override
    public JSONObject process(JSONObject jsonObject) throws BizException {
        log.info(&amp;quot;传入消息:\n{}&amp;quot;, jsonObject.toString());
        AbstractSinkBeanCmdExe sinkBeanCmdExe;
        String tranMode = (String)jsonObject.get(&amp;quot;tranMode&amp;quot;);
        switch (tranMode) {
            case &amp;quot;timeout&amp;quot;:
                // 收到交易后，永远返回超时
                return timeoutCmdExe.execute(jsonObject);
            case &amp;quot;3timeout-fail&amp;quot;:
                // 收到交易后，前3次返回超时，第4次返回失败码
                return timeoutAndFailCmdExe.execute(jsonObject);
            case &amp;quot;3timeout-success&amp;quot;:
                // 收到交易后，前3次返回超时，第4次成功返回原报文
                return timeoutAndSuccessCmdExe.execute(jsonObject);
            default:
                //其它情况,成功返回原报文
                return successCmdExe.execute(jsonObject);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，Payment2领域服务在封装时，涉及到多个接口调用，对每个接口采用命令执行器（Command Executor），这里是传入标准的JSONObject数据，所以所有的接口实现继承AbstractSinkBeanCmdExe类来实现：
&lt;img src=&#34;1631778769217-1eb52b38-45bd-4dff-b4d2-aa09cb2acd00.png&#34; alt=&#34;image.png&#34;&gt;
在应用层中，在原有的PersonalAppInterface应用层接口、PersonalAppService服务类中，增加send2Payment2()、getCustomerAndSaf2Payment2()这2个方法接口和实现，通过personalAppDelayInterface延迟调用接口，实现对原有send2Payment2()方法的多次SAF调用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class PersonalAppService implements PersonalAppInterface {
    ...
        
    private BizMessageInterface payment2SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment2-sink&amp;quot;);
    private PersonalAppInterface personalAppDelayInterface = IntegratorClientFactory
            .getDelayBizServiceClient(PersonalAppInterface.class,&amp;quot;app/personal&amp;quot;,
                    0,1000,2000,4000,8000,16000,32000);
	...
        
    @Override
    public BizMessage send2Payment2(String tranMode, String tranCode, Object message) throws BizException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;tranCode&amp;quot;,tranCode);
        jsonObject.set(&amp;quot;tranMode&amp;quot;,tranMode);
        jsonObject.set(&amp;quot;message&amp;quot;,message);
        return this.payment2SinkInterface.call(jsonObject);
    }

    @Override
    public Customer getCustomerAndSaf2Payment2(String tranMode,String customerId) throws BizException {
        Customer customer = this.customerSinkInterface.getCustomer(customerId);
        this.personalAppDelayInterface.send2Payment2(tranMode,&amp;quot;send-customer&amp;quot;, customer);
        return customer;
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传入交易模式为”timeout“（收到交易后，永远返回超时），这将导致发送7次，最后交易状态为失败：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getCustomerAndSaf2Payment2&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;timeout&amp;quot;,&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;c1d2ffb7f0b44bf4b0cb7e13e5c0c0fa&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631274896174,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;age&amp;quot;: 30
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Payment2SinkApplication日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2021-09-10 19:54:56.650  INFO 14993 --- [nio-8004-exec-3] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;timeout&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:54:56.651  INFO 14993 --- [nio-8004-exec-3] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:54:57.753  INFO 14993 --- [nio-8004-exec-4] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;timeout&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:54:57.754  INFO 14993 --- [nio-8004-exec-4] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:54:59.920  INFO 14993 --- [nio-8004-exec-5] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;timeout&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:54:59.920  INFO 14993 --- [nio-8004-exec-5] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:55:04.015  INFO 14993 --- [nio-8004-exec-6] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;timeout&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:55:04.015  INFO 14993 --- [nio-8004-exec-6] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:55:12.041  INFO 14993 --- [nio-8004-exec-7] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;timeout&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:55:12.042  INFO 14993 --- [nio-8004-exec-7] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:55:28.080  INFO 14993 --- [nio-8004-exec-8] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;timeout&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:55:28.080  INFO 14993 --- [nio-8004-exec-8] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:56:00.228  INFO 14993 --- [nio-8004-exec-9] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;timeout&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:56:00.228  INFO 14993 --- [nio-8004-exec-9] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传入交易码为”3timeout-fail“（收到交易后，前3次返回超时，第4次返回失败），这将导致发送4次，最后交易状态为失败：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getCustomerAndSaf2Payment2&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;3timeout-fail&amp;quot;,&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;d3589b169d654a409c2f7d15f83f5113&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631275051123,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;age&amp;quot;: 30
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Payment2SinkApplication日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2021-09-10 19:57:31.379  INFO 14993 --- [nio-8004-exec-1] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;3timeout-fail&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:57:31.379  INFO 14993 --- [nio-8004-exec-1] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:57:32.647  INFO 14993 --- [nio-8004-exec-2] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;3timeout-fail&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:57:32.647  INFO 14993 --- [nio-8004-exec-2] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:57:34.672  INFO 14993 --- [nio-8004-exec-3] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;3timeout-fail&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:57:34.673  INFO 14993 --- [nio-8004-exec-3] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:57:38.733  INFO 14993 --- [nio-8004-exec-4] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;3timeout-fail&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:57:38.733  INFO 14993 --- [nio-8004-exec-4] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回交易处理失败!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传入交易码为”3timeout-success“（收到交易后，前3次返回超时，第4次成功返回原报文），这将导致发送4次，最后交易状态为成功：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;getCustomerAndSaf2Payment2&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;3timeout-success&amp;quot;,&amp;quot;001&amp;quot;]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;75b76cf518164964bedf477ea488698c&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631275117934,
  &amp;quot;data&amp;quot;: {
    &amp;quot;result&amp;quot;: {
      &amp;quot;sex&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;customerName&amp;quot;: &amp;quot;张三&amp;quot;,
      &amp;quot;customerId&amp;quot;: &amp;quot;001&amp;quot;,
      &amp;quot;age&amp;quot;: 30
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Payment2SinkApplication日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2021-09-10 19:58:38.146  INFO 14993 --- [nio-8004-exec-5] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;3timeout-success&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:58:38.146  INFO 14993 --- [nio-8004-exec-5] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:58:39.200  INFO 14993 --- [nio-8004-exec-6] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;3timeout-success&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:58:39.200  INFO 14993 --- [nio-8004-exec-6] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:58:41.409  INFO 14993 --- [nio-8004-exec-7] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;3timeout-success&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:58:41.409  INFO 14993 --- [nio-8004-exec-7] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回超时异常!
2021-09-10 19:58:45.539  INFO 14993 --- [nio-8004-exec-8] c.x.d.p.service.Payment2DomainService    : 传入消息:
{&amp;quot;tranMode&amp;quot;:&amp;quot;3timeout-success&amp;quot;,&amp;quot;message&amp;quot;:{&amp;quot;sex&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;customerName&amp;quot;:&amp;quot;张三&amp;quot;,&amp;quot;customerId&amp;quot;:&amp;quot;001&amp;quot;,&amp;quot;age&amp;quot;:30},&amp;quot;tranCode&amp;quot;:&amp;quot;send-customer&amp;quot;}
2021-09-10 19:58:45.539  INFO 14993 --- [nio-8004-exec-8] c.x.d.p.service.Payment2DomainService    : 交易:send-customer,返回交易成功!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-向前补偿的实现&#34;&gt;2. 向前补偿的实现&lt;/h3&gt;
&lt;p&gt;向前补偿机制是指当交易无应答时，系统会对原交易进行查询，如查询超时会重试多次。如原交易成功则继续后续交易，如原交易失败则对前续交易进行交易补偿，向前补偿一般是针对第三方接入方无法提供补偿交易时的解决方案。
在金融领域，这类交易补偿动作常被称为“冲正”。
在应用层中，在原有的PersonalAppInterface应用层接口、PersonalAppService服务类中，增加payoutForward()、payoutForwardCompensate()这2个方法接口和实现，通过personalAppDelayInterface延迟调用接口，实现对原有payoutForwardCompensate()方法的多次重复延迟调用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class PersonalAppService implements PersonalAppInterface {
    private AccountSinkInterface accountSinkInterface = IntegratorClientFactory
            .getSinkClient(AccountSinkInterface.class,&amp;quot;account-sink&amp;quot;);
    private CustomerSinkInterface customerSinkInterface = IntegratorClientFactory
            .getSinkClient(CustomerSinkInterface.class,&amp;quot;customer-sink&amp;quot;);
    private BizMessageInterface payment1SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment1-sink&amp;quot;);
    private BizMessageInterface payment2SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment2-sink&amp;quot;);
    private PersonalAppInterface personalAppDelayInterface = IntegratorClientFactory
            .getDelayBizServiceClient(PersonalAppInterface.class,&amp;quot;app/personal&amp;quot;,
                    0,1000,2000,4000,8000,16000,32000);
    
    ......
        
	@Override
    public void payoutForward(String tranMode,String accountId, long amount) throws BizException {
        log.info(&amp;quot;account出金:{},{}&amp;quot;,accountId,amount);
        this.accountDomainInterface.payout(accountId,amount);
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;tranCode&amp;quot;,&amp;quot;pay&amp;quot;);
        jsonObject.set(&amp;quot;tranMode&amp;quot;,tranMode);
        jsonObject.set(&amp;quot;accountId&amp;quot;,accountId);
        jsonObject.set(&amp;quot;tranAmount&amp;quot;,amount);
        BizMessage&amp;lt;JSONObject&amp;gt; bizMessage = null;
        try {
            log.info(&amp;quot;payment缴费...&amp;quot;);
            bizMessage = this.payment2SinkInterface.call(jsonObject);
        } catch (BizException e) {
            if (e.isTimeOutException()) {
                log.info(&amp;quot;payment交易超时,开始payout补偿...&amp;quot;);
                this.personalAppDelayInterface.payoutForwardCompensate(jsonObject);
                return;
            }
            else {
                throw e;
            }
        }
        log.info(&amp;quot;payment缴费成功!&amp;quot;);
        log.info(&amp;quot;payout成功!&amp;quot;);
    }

    @Override
    public void payoutForwardCompensate(JSONObject jsonObject)  throws BizException{
        jsonObject.set(&amp;quot;tranCode&amp;quot;,&amp;quot;pay-query&amp;quot;);
        BizMessage&amp;lt;JSONObject&amp;gt; bizMessage = null;
        try {
            log.info(&amp;quot;payment查询缴费订单...&amp;quot;);
            bizMessage = this.payment2SinkInterface.call(jsonObject);
        } catch (BizException e) {
            if (e.isTimeOutException()) {
                log.info(&amp;quot;payment交易超时...&amp;quot;);
                throw e;
            }
            else {
                log.info(&amp;quot;payment查询缴费订单返回错误（表示对方订单没执行）...&amp;quot;);
                String accountId = (String)jsonObject.get(&amp;quot;accountId&amp;quot;);
                long amount = (Integer) jsonObject.get(&amp;quot;tranAmount&amp;quot;);
                log.info(&amp;quot;account出金补偿:{},{}&amp;quot;,accountId,amount);
                this.accountDomainInterface.payoutCompensation(accountId,amount);
                return;
            }
        }
        log.info(&amp;quot;payment查询缴费订单成功（表示对方订单已执行）&amp;quot;);
        log.info(&amp;quot;payout成功!&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传入交易模式为”3timeout-success“（收到订单交易后，前3次返回超时，第4次成功返回模拟订单已执行），这将导致发送4次，最后交易状态为成功：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;payoutForward&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;3timeout-success&amp;quot;,&amp;quot;0001&amp;quot;,1]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;e0127a25e2514da682ad77042917087a&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631275840559,
  &amp;quot;data&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;XbankAppApplication日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:40.560 INFO 16503 [11034350FE38437BB459F1E8DC6CCE17] [http-nio-8888-exec-5] c.xbank.app.service.PersonalAppService   account出金:0001,1
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:40.822 INFO 16503 [11034350FE38437BB459F1E8DC6CCE17] [http-nio-8888-exec-5] c.xbank.app.service.PersonalAppService   payment缴费...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:40.831 INFO 16503 [11034350FE38437BB459F1E8DC6CCE17] [http-nio-8888-exec-5] c.xbank.app.service.PersonalAppService   payment交易超时,开始payout补偿...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:42.086 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-4] c.xbank.app.service.PersonalAppService   payment查询缴费订单...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:42.095 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-4] c.xbank.app.service.PersonalAppService   payment交易超时...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:43.268 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-3] c.xbank.app.service.PersonalAppService   payment查询缴费订单...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:43.277 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-3] c.xbank.app.service.PersonalAppService   payment交易超时...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:45.296 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] c.xbank.app.service.PersonalAppService   payment查询缴费订单...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:45.306 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] c.xbank.app.service.PersonalAppService   payment查询缴费订单成功（表示对方订单已执行）
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:10:45.306 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] c.xbank.app.service.PersonalAppService   payout成功!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传入交易模式为”3timeout-success“（收到订单交易后，前3次返回超时，第4次成功返回模拟订单已执行），这将导致发送4次，最后交易状态为成功：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;payoutForward&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;3timeout-fail&amp;quot;,&amp;quot;0001&amp;quot;,1]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;a04163bf05484fa28071650a085d4124&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631275997342,
  &amp;quot;data&amp;quot;: {}
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;XbankAppApplication日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:17.342 INFO 16503 [5E5951618A27430684C5552E1F782D8B] [http-nio-8888-exec-7] c.xbank.app.service.PersonalAppService   account出金:0001,1
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:17.568 INFO 16503 [5E5951618A27430684C5552E1F782D8B] [http-nio-8888-exec-7] c.xbank.app.service.PersonalAppService   payment缴费...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:17.579 INFO 16503 [5E5951618A27430684C5552E1F782D8B] [http-nio-8888-exec-7] c.xbank.app.service.PersonalAppService   payment交易超时,开始payout补偿...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:17.775 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-5] c.xbank.app.service.PersonalAppService   payment查询缴费订单...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:17.788 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-5] c.xbank.app.service.PersonalAppService   payment交易超时...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:18.827 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] c.xbank.app.service.PersonalAppService   payment查询缴费订单...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:18.836 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] c.xbank.app.service.PersonalAppService   payment交易超时...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:20.890 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-4] c.xbank.app.service.PersonalAppService   payment查询缴费订单...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:20.900 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-4] c.xbank.app.service.PersonalAppService   payment查询缴费订单返回错误（表示对方订单没执行）...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:13:20.901 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-4] c.xbank.app.service.PersonalAppService   account出金补偿:0001,1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-向后补偿的实现&#34;&gt;3. 向后补偿的实现&lt;/h3&gt;
&lt;p&gt;向后补偿机制是指当交易无应答时，系统会对原交易发起多次交易补偿重试，如补偿交易成功则对前续交易进行补偿。
在应用层中，在原有的PersonalAppInterface应用层接口、PersonalAppService服务类中，增加payoutBackward()、payoutBackwardCompensate()这2个方法接口和实现，通过personalAppDelayInterface延迟调用接口，实现对原有payoutForwardCompensate()方法的多次重复延迟调用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public class PersonalAppService implements PersonalAppInterface {
    private AccountSinkInterface accountSinkInterface = IntegratorClientFactory
            .getSinkClient(AccountSinkInterface.class,&amp;quot;account-sink&amp;quot;);
    private CustomerSinkInterface customerSinkInterface = IntegratorClientFactory
            .getSinkClient(CustomerSinkInterface.class,&amp;quot;customer-sink&amp;quot;);
    private BizMessageInterface payment1SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment1-sink&amp;quot;);
    private BizMessageInterface payment2SinkInterface = IntegratorClientFactory
            .getSinkClient(BizMessageInterface.class,&amp;quot;payment2-sink&amp;quot;);
    private PersonalAppInterface personalAppDelayInterface = IntegratorClientFactory
            .getDelayBizServiceClient(PersonalAppInterface.class,&amp;quot;app/personal&amp;quot;,
                    0,1000,2000,4000,8000,16000,32000);
    
    ......
        
	@Override
    public void payoutBackward(String tranMode, String accountId, long amount) throws BizException {
        log.info(&amp;quot;account出金:{},{}&amp;quot;,accountId,amount);
        this.accountDomainInterface.payout(accountId,amount);
        JSONObject jsonObject = new JSONObject();
        jsonObject.set(&amp;quot;tranCode&amp;quot;,&amp;quot;pay&amp;quot;);
        jsonObject.set(&amp;quot;tranMode&amp;quot;,tranMode);
        jsonObject.set(&amp;quot;accountId&amp;quot;,accountId);
        jsonObject.set(&amp;quot;tranAmount&amp;quot;,amount);
        BizMessage&amp;lt;JSONObject&amp;gt; bizMessage = null;
        try {
            log.info(&amp;quot;payment缴费...&amp;quot;);
            bizMessage = this.payment2SinkInterface.call(jsonObject);
        } catch (BizException e) {
            if (e.isTimeOutException()) {
                log.info(&amp;quot;payment交易超时,开始payout冲正...&amp;quot;);
                this.personalAppDelayInterface.payoutBackwardCompensate(jsonObject);
                return;
            }
            else {
                log.info(&amp;quot;payment缴费交易返回错误&amp;quot;);
                log.info(&amp;quot;account出金补偿:{},{}&amp;quot;,accountId,amount);
                this.accountDomainInterface.payoutCompensation(accountId,amount);
                log.info(&amp;quot;payout交易补偿成功！&amp;quot;);
                return;
            }
        }
        log.info(&amp;quot;payment缴费成功&amp;quot;);
        log.info(&amp;quot;payout成功!&amp;quot;);
    }

    @Override
    public void payoutBackwardCompensate(JSONObject jsonObject) throws BizException {
        jsonObject.set(&amp;quot;tranCode&amp;quot;,&amp;quot;pay-reversal&amp;quot;);
        BizMessage&amp;lt;JSONObject&amp;gt; bizMessage;
        try {
            log.info(&amp;quot;payment缴费补偿...&amp;quot;);
            bizMessage = this.payment2SinkInterface.call(jsonObject);
            log.info(&amp;quot;payment缴费补偿成功&amp;quot;);
        } catch (BizException e) {
            if (e.isTimeOutException()) {
                log.info(&amp;quot;payment缴费补偿交易超时...&amp;quot;);
                throw e;
            }
            log.info(&amp;quot;payment缴费补偿交易失败,需要人工干预调整!&amp;quot;);
            return;
        }
        String accountId = (String)jsonObject.get(&amp;quot;accountId&amp;quot;);
        long amount = (Integer)jsonObject.get(&amp;quot;tranAmount&amp;quot;);
        log.info(&amp;quot;account出金补偿:{},{}&amp;quot;,accountId,amount);
        this.accountDomainInterface.payoutCompensation(accountId,amount);
        log.info(&amp;quot;payout补偿成功！&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传入交易模式为”3timeout-success“（收到订单交易后，前3次返回补偿交易超时，第4次成功返回补偿交易执行成功），这将导致发送4次，最后交易状态为成功：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;payoutBackward&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;3timeout-success&amp;quot;,&amp;quot;0001&amp;quot;,1]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;26c58fe44b3f4ceba462762494fa5981&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631276405513,
  &amp;quot;data&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;XbankAppApplication日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:05.513 INFO 16503 [84936F44451449C5A92183EF93C3690C] [http-nio-8888-exec-2] c.xbank.app.service.PersonalAppService   account出金:0001,1
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:05.952 INFO 16503 [84936F44451449C5A92183EF93C3690C] [http-nio-8888-exec-2] c.xbank.app.service.PersonalAppService   payment缴费...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:05.961 INFO 16503 [84936F44451449C5A92183EF93C3690C] [http-nio-8888-exec-2] c.xbank.app.service.PersonalAppService   payment交易超时,开始payout冲正...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:06.396 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] c.xbank.app.service.PersonalAppService   payment缴费补偿...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:06.405 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] c.xbank.app.service.PersonalAppService   payment缴费补偿交易超时...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:07.468 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-4] c.xbank.app.service.PersonalAppService   payment缴费补偿...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:07.475 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-4] c.xbank.app.service.PersonalAppService   payment缴费补偿交易超时...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:09.560 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-3] c.xbank.app.service.PersonalAppService   payment缴费补偿...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:09.570 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-3] c.xbank.app.service.PersonalAppService   payment缴费补偿成功
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:09.571 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-3] c.xbank.app.service.PersonalAppService   account出金补偿:0001,1
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:20:09.726 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-3] c.xbank.app.service.PersonalAppService   payout补偿成功！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传入交易模式为”3timeout-fail“（收到订单交易后，前3次返回超时，第4次成功返回模拟补偿交易失败），这将导致发送4次，最后交易状态为失败：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;Biz-Service-Id:app/personal&amp;quot; -X POST --data &#39;{&amp;quot;methodName&amp;quot;:&amp;quot;payoutBackward&amp;quot;,&amp;quot;params&amp;quot;:[&amp;quot;3timeout-fail&amp;quot;,&amp;quot;0001&amp;quot;,1]}&#39; http://localhost:8888/api|jq

{
  &amp;quot;code&amp;quot;: 0,
  &amp;quot;message&amp;quot;: &amp;quot;success&amp;quot;,
  &amp;quot;extMessage&amp;quot;: null,
  &amp;quot;traceId&amp;quot;: &amp;quot;40aed8f06bba436ba67ff93e769d5a33&amp;quot;,
  &amp;quot;parentTraceId&amp;quot;: null,
  &amp;quot;timestamp&amp;quot;: 1631276555599,
  &amp;quot;data&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;XbankAppApplication日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:35.599 INFO 16503 [B54A535614A64492A7A00D987F12B529] [http-nio-8888-exec-4] c.xbank.app.service.PersonalAppService   account出金:0001,1
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:35.760 INFO 16503 [B54A535614A64492A7A00D987F12B529] [http-nio-8888-exec-4] c.xbank.app.service.PersonalAppService   payment缴费...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:35.767 INFO 16503 [B54A535614A64492A7A00D987F12B529] [http-nio-8888-exec-4] c.xbank.app.service.PersonalAppService   payment交易超时,开始payout冲正...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:35.979 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] c.xbank.app.service.PersonalAppService   payment缴费补偿...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:35.993 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] c.xbank.app.service.PersonalAppService   payment缴费补偿交易超时...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:37.073 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-5] c.xbank.app.service.PersonalAppService   payment缴费补偿...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:37.083 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-5] c.xbank.app.service.PersonalAppService   payment缴费补偿交易超时...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:39.111 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] c.xbank.app.service.PersonalAppService   payment缴费补偿...
[bizsip-integrator:192.169.1.101:8888] 2021-09-10 20:22:39.121 INFO 16503 [] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] c.xbank.app.service.PersonalAppService   payment缴费补偿交易失败,需要人工干预调整!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;八总结&#34;&gt;八、总结&lt;/h2&gt;
&lt;h3 id=&#34;1-sink服务领域层服务&#34;&gt;1. Sink服务（领域层服务）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sink-bean类sink服务
&lt;ul&gt;
&lt;li&gt;sink接口为BizMessage&lt;JSONObject&gt;类型；&lt;/li&gt;
&lt;li&gt;基于&lt;SinkBeanInterface&gt;或&lt;JSONObjectSinkBeanInterface&gt;接口开发服务类，实现process()方法，2个接口区别在于出入参数的类型，前1个是byte[]类型，后1个是JSONObject类型；&lt;/li&gt;
&lt;li&gt;在sink.yml中配置”sink-bean“类型的connector，服务类支持JavaBean和SpringBean二种挂接方式；&lt;/li&gt;
&lt;li&gt;在sink.yml中支持多种convert，传入process()方法的参数为经过convert转换后的消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bean类sink服务
&lt;ul&gt;
&lt;li&gt;sink接口为BizMessage&lt;JSONObject&gt;类型，JSONObject消息体中包括：className（可选）、methodName（可选）、params（必选），params为JSONArray类型；&lt;/li&gt;
&lt;li&gt;可自由开发服务类；&lt;/li&gt;
&lt;li&gt;在sink.yml中配置”bean“类型的connector，服务类支持JavaBean和SpringBean二种挂接方式；&lt;/li&gt;
&lt;li&gt;在sink.yml中convert只支持simple-json类型（后期可能会取消对于bean类sink服务的convert配置）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-biz-service聚合服务应用层服务&#34;&gt;2. Biz-Service聚合服务（应用层服务）&lt;/h3&gt;
&lt;p&gt;integrator接口为带”Biz-Service-Id“header头、以POST方式提交JSON数据，返回为BizMessage&lt;JSONObject&gt;类型的JSON串。
在integrator-bean-service、bean-service类聚合服务开发服务类中，可以用IntegratorClientFactory.getSinkClient()和IntegratorClientFactory.getDelayBizServiceClient()，分别获取sink接口访问和延迟Biz-Service聚合服务接口访问的client API接口。
对sink-bean类sink服务，sink接口为BizMessage&lt;JSONObject&gt;类型，应采用&lt;BizMessageInterface&gt;接口，统一调用call()方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;integrator-bean-service类聚合服务
&lt;ul&gt;
&lt;li&gt;请求提交为JSON数据；&lt;/li&gt;
&lt;li&gt;基于&lt;IntegratorBeanInterface&gt;接口开发服务类，实现doBizService()方法；&lt;/li&gt;
&lt;li&gt;在service.yml中配置”integrator-bean-service“类型的聚合服务，服务类目前只支持JavaBean挂接方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bean-service类聚合服务
&lt;ul&gt;
&lt;li&gt;请求提交为JSON数据，JSON数据中包括：methodName（必选）、params（必选），params为JSONArray类型；&lt;/li&gt;
&lt;li&gt;可自由开发服务类；&lt;/li&gt;
&lt;li&gt;在service.yml中配置”bean-service“类型的聚合服务，服务类目前只支持SpringBean挂接方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sink-service类聚合服务
&lt;ul&gt;
&lt;li&gt;请求提交为JSON数据，JSON数据根据后端sink服务接口来定；&lt;/li&gt;
&lt;li&gt;无需开发代码；&lt;/li&gt;
&lt;li&gt;在service.yml中配置”sink-service“类型的聚合服务，并配置关联到后端的sink端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;script类聚合服务
&lt;ul&gt;
&lt;li&gt;请求提交为JSON数据即可，在脚本中调用sink前，应按要求转换成sink约定的JSON数据格式；&lt;/li&gt;
&lt;li&gt;无需开发Java代码，但需配置聚合服务脚本；&lt;/li&gt;
&lt;li&gt;在config/service目录中配置脚本文件，无需在service.yml中配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-适配层服务&#34;&gt;3. 适配层服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;采用Biz-SIP自带OpenAPI接口
&lt;ul&gt;
&lt;li&gt;Integrator接口为Biz-SIP平台的OpenAPI接口，可以按需对外开放访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定制适配层接入模块
&lt;ul&gt;
&lt;li&gt;引入Souce类，可以根据消息格式转换的定制，自动进行消息格式转换和适配；&lt;/li&gt;
&lt;li&gt;通过SourceClientFactory.getBizServiceClient()，获取Biz-Service聚合服务访问接口（具体请参见&lt;a href=&#34;#lazZY&#34;&gt;链接&lt;/a&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;附录1biz-sip运行机制图&#34;&gt;附录1：Biz-SIP运行机制图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;1631863592446-fa064970-8fc9-4d81-b1dc-8b601c639846.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;附录2ddd各层功能定位与粒度划分&#34;&gt;附录2：DDD各层功能定位与粒度划分&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层级&lt;/th&gt;
&lt;th&gt;功能定位&lt;/th&gt;
&lt;th&gt;粒度划分&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;适配层&lt;/td&gt;
&lt;td&gt;渠道接入相关的加解密、验签；&lt;br&gt;渠道接入通讯连接的对接；&lt;br&gt;渠道消息格式的转换；&lt;br&gt;OpenAPI的接入；&lt;/td&gt;
&lt;td&gt;按接入渠道进行划分；&lt;br&gt;渠道入口和出口，可能会拆分，一般渠道入口在适配层，出口由领域层对接；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;统一应用层消息校验；&lt;br&gt;领域层服务的组装和编排；&lt;/td&gt;
&lt;td&gt;按业务、按系统进行拆分，涉及到1个以上领域服务；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;领域层&lt;/td&gt;
&lt;td&gt;交易处理；&lt;br&gt;第三方对接，包括安全（加解密、验签）、通讯、消息格式的转换；&lt;/td&gt;
&lt;td&gt;交易系统，按业务划分；&lt;br&gt;对接第三方，按渠道；&lt;br&gt;按数据库划分；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基础设施层&lt;/td&gt;
&lt;td&gt;数据库DAO；&lt;br&gt;HSM安全&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
  </channel>
</rss>
